// TEMPLATE_TYPES: float, double
// This file is part of the Prowl Game Engine
// Licensed under the MIT License. See the LICENSE file in the project root for details.

using System;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace Prowl.Vector.{{NAMESPACE_SUFFIX}}
{
    /// <summary>
    /// Represents a 3D viewing frustum defined by 6 planes.
    /// Planes are ordered: Near, Far, Left, Right, Top, Bottom.
    /// </summary>
    public struct {{CLASS_NAME}} : IEquatable<{{CLASS_NAME}}>, IFormattable
    {
        /// <summary>The 6 frustum planes: Near, Far, Left, Right, Top, Bottom.</summary>
        public Plane{{TYPE_PREFIX}}[] Planes;

        /// <summary>
        /// Initializes a new frustum with the specified planes.
        /// </summary>
        /// <param name="planes">Array of 6 planes in order: Near, Far, Left, Right, Top, Bottom.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public {{CLASS_NAME}}(Plane{{TYPE_PREFIX}}[] planes)
        {
            if (planes == null || planes.Length != 6)
                throw new ArgumentException("Frustum requires exactly 6 planes", nameof(planes));
            
            Planes = new Plane{{TYPE_PREFIX}}[6];
            Array.Copy(planes, Planes, 6);
        }

        /// <summary>
        /// Initializes a new frustum with individual planes.
        /// </summary>
        /// <param name="near">Near plane.</param>
        /// <param name="far">Far plane.</param>
        /// <param name="left">Left plane.</param>
        /// <param name="right">Right plane.</param>
        /// <param name="top">Top plane.</param>
        /// <param name="bottom">Bottom plane.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public {{CLASS_NAME}}(Plane{{TYPE_PREFIX}} near, Plane{{TYPE_PREFIX}} far, Plane{{TYPE_PREFIX}} left, 
                             Plane{{TYPE_PREFIX}} right, Plane{{TYPE_PREFIX}} top, Plane{{TYPE_PREFIX}} bottom)
        {
            Planes = new Plane{{TYPE_PREFIX}}[6] { near, far, left, right, top, bottom };
        }

        /// <summary>Gets or sets the near plane.</summary>
        public Plane{{TYPE_PREFIX}} Near
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Planes[0];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => Planes[0] = value;
        }

        /// <summary>Gets or sets the far plane.</summary>
        public Plane{{TYPE_PREFIX}} Far
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Planes[1];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => Planes[1] = value;
        }

        /// <summary>Gets or sets the left plane.</summary>
        public Plane{{TYPE_PREFIX}} Left
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Planes[2];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => Planes[2] = value;
        }

        /// <summary>Gets or sets the right plane.</summary>
        public Plane{{TYPE_PREFIX}} Right
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Planes[3];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => Planes[3] = value;
        }

        /// <summary>Gets or sets the top plane.</summary>
        public Plane{{TYPE_PREFIX}} Top
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Planes[4];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => Planes[4] = value;
        }

        /// <summary>Gets or sets the bottom plane.</summary>
        public Plane{{TYPE_PREFIX}} Bottom
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => Planes[5];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set => Planes[5] = value;
        }

        /// <summary>
        /// Creates a frustum from a view-projection matrix.
        /// Extracts the 6 frustum planes from the combined matrix.
        /// </summary>
        /// <param name="viewProjectionMatrix">The combined view-projection matrix.</param>
        /// <returns>The extracted frustum.</returns>
        public static {{CLASS_NAME}} FromMatrix({{TYPE_PREFIX}}4x4 viewProjectionMatrix)
        {
            var planes = new Plane{{TYPE_PREFIX}}[6];
            
            // Extract planes from matrix (Gribb/Hartmann method)
            // Left plane
            {{TYPE_PREFIX}}3 leftNormal = new {{TYPE_PREFIX}}3(
                viewProjectionMatrix.c3.X + viewProjectionMatrix.c0.X,
                viewProjectionMatrix.c3.Y + viewProjectionMatrix.c0.Y,
                viewProjectionMatrix.c3.Z + viewProjectionMatrix.c0.Z
            );
            {{TYPE}} leftD = viewProjectionMatrix.c3.W + viewProjectionMatrix.c0.W;
            planes[2] = new Plane{{TYPE_PREFIX}}(leftNormal, leftD);

            // Right plane
            {{TYPE_PREFIX}}3 rightNormal = new {{TYPE_PREFIX}}3(
                viewProjectionMatrix.c3.X - viewProjectionMatrix.c0.X,
                viewProjectionMatrix.c3.Y - viewProjectionMatrix.c0.Y,
                viewProjectionMatrix.c3.Z - viewProjectionMatrix.c0.Z
            );
            {{TYPE}} rightD = viewProjectionMatrix.c3.W - viewProjectionMatrix.c0.W;
            planes[3] = new Plane{{TYPE_PREFIX}}(rightNormal, rightD);

            // Bottom plane
            {{TYPE_PREFIX}}3 bottomNormal = new {{TYPE_PREFIX}}3(
                viewProjectionMatrix.c3.X + viewProjectionMatrix.c1.X,
                viewProjectionMatrix.c3.Y + viewProjectionMatrix.c1.Y,
                viewProjectionMatrix.c3.Z + viewProjectionMatrix.c1.Z
            );
            {{TYPE}} bottomD = viewProjectionMatrix.c3.W + viewProjectionMatrix.c1.W;
            planes[5] = new Plane{{TYPE_PREFIX}}(bottomNormal, bottomD);

            // Top plane
            {{TYPE_PREFIX}}3 topNormal = new {{TYPE_PREFIX}}3(
                viewProjectionMatrix.c3.X - viewProjectionMatrix.c1.X,
                viewProjectionMatrix.c3.Y - viewProjectionMatrix.c1.Y,
                viewProjectionMatrix.c3.Z - viewProjectionMatrix.c1.Z
            );
            {{TYPE}} topD = viewProjectionMatrix.c3.W - viewProjectionMatrix.c1.W;
            planes[4] = new Plane{{TYPE_PREFIX}}(topNormal, topD);

            // Near plane
            {{TYPE_PREFIX}}3 nearNormal = new {{TYPE_PREFIX}}3(
                viewProjectionMatrix.c2.X,
                viewProjectionMatrix.c2.Y,
                viewProjectionMatrix.c2.Z
            );
            {{TYPE}} nearD = viewProjectionMatrix.c2.W;
            planes[0] = new Plane{{TYPE_PREFIX}}(nearNormal, nearD);

            // Far plane
            {{TYPE_PREFIX}}3 farNormal = new {{TYPE_PREFIX}}3(
                viewProjectionMatrix.c3.X - viewProjectionMatrix.c2.X,
                viewProjectionMatrix.c3.Y - viewProjectionMatrix.c2.Y,
                viewProjectionMatrix.c3.Z - viewProjectionMatrix.c2.Z
            );
            {{TYPE}} farD = viewProjectionMatrix.c3.W - viewProjectionMatrix.c2.W;
            planes[1] = new Plane{{TYPE_PREFIX}}(farNormal, farD);

            return new {{CLASS_NAME}}(planes);
        }

        /// <summary>
        /// Creates a frustum from separate view and projection matrices.
        /// </summary>
        /// <param name="viewMatrix">The view matrix.</param>
        /// <param name="projectionMatrix">The projection matrix.</param>
        /// <returns>The frustum.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static {{CLASS_NAME}} FromMatrices({{TYPE_PREFIX}}4x4 viewMatrix, {{TYPE_PREFIX}}4x4 projectionMatrix)
        {
            {{TYPE_PREFIX}}4x4 viewProjection = Maths.Mul(projectionMatrix, viewMatrix);
            return FromMatrix(viewProjection);
        }

        /// <summary>
        /// Checks if a point is contained within the frustum.
        /// </summary>
        /// <param name="point">The point to test.</param>
        /// <returns>True if the point is inside the frustum.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Contains({{TYPE_PREFIX}}3 point)
        {
            {{TYPE_PREFIX}}3[] normals = new {{TYPE_PREFIX}}3[6];
            {{TYPE}}[] ds = new {{TYPE}}[6];
            
            for (int i = 0; i < 6; i++)
            {
                normals[i] = Planes[i].Normal;
                ds[i] = Planes[i].D;
            }
            
            return Intersection{{TYPE_PREFIX}}.FrustumContainsPoint(normals, ds, point);
        }

        /// <summary>
        /// Checks if a sphere intersects with the frustum.
        /// </summary>
        /// <param name="sphere">The sphere to test.</param>
        /// <returns>True if the sphere intersects the frustum.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Intersects(Sphere{{TYPE_PREFIX}} sphere)
        {
            {{TYPE_PREFIX}}3[] normals = new {{TYPE_PREFIX}}3[6];
            {{TYPE}}[] ds = new {{TYPE}}[6];
            
            for (int i = 0; i < 6; i++)
            {
                normals[i] = Planes[i].Normal;
                ds[i] = Planes[i].D;
            }
            
            return Intersection{{TYPE_PREFIX}}.FrustumIntersectsSphere(normals, ds, sphere.Center, sphere.Radius);
        }

        /// <summary>
        /// Checks if an AABB intersects with the frustum.
        /// </summary>
        /// <param name="aabb">The AABB to test.</param>
        /// <returns>True if the AABB intersects the frustum.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Intersects(AABB{{TYPE_PREFIX}} aabb)
        {
            {{TYPE_PREFIX}}3[] normals = new {{TYPE_PREFIX}}3[6];
            {{TYPE}}[] ds = new {{TYPE}}[6];
            
            for (int i = 0; i < 6; i++)
            {
                normals[i] = Planes[i].Normal;
                ds[i] = Planes[i].D;
            }
            
            return Intersection{{TYPE_PREFIX}}.FrustumIntersectsAABB(normals, ds, aabb.Min, aabb.Max);
        }

        /// <summary>
        /// Transforms the frustum by a matrix.
        /// </summary>
        /// <param name="matrix">The transformation matrix.</param>
        /// <returns>The transformed frustum.</returns>
        public {{CLASS_NAME}} Transform({{TYPE_PREFIX}}4x4 matrix)
        {
            var transformedPlanes = new Plane{{TYPE_PREFIX}}[6];
            
            // Transform each plane by the inverse transpose of the matrix
            {{TYPE_PREFIX}}4x4 invTranspose = Maths.Transpose(Maths.Inverse(matrix));
            
            for (int i = 0; i < 6; i++)
            {
                {{TYPE_PREFIX}}4 planeVec = new {{TYPE_PREFIX}}4(Planes[i].Normal, Planes[i].D);
                {{TYPE_PREFIX}}4 transformedPlaneVec = Maths.Mul(invTranspose, planeVec);
                transformedPlanes[i] = new Plane{{TYPE_PREFIX}}(transformedPlaneVec.XYZ, transformedPlaneVec.W);
            }
            
            return new {{CLASS_NAME}}(transformedPlanes);
        }

        /// <summary>
        /// Normalizes all frustum planes to ensure consistent distance calculations.
        /// </summary>
        public void Normalize()
        {
            for (int i = 0; i < 6; i++)
            {
                {{TYPE}} length = Maths.Length(Planes[i].Normal);
                if (length > {{EPSILON}})
                {
                    Planes[i] = new Plane{{TYPE_PREFIX}}(
                        Planes[i].Normal / length,
                        Planes[i].D / length
                    );
                }
            }
        }

        /// <summary>
        /// Returns a normalized version of this frustum.
        /// </summary>
        /// <returns>The normalized frustum.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public {{CLASS_NAME}} Normalized()
        {
            var result = this;
            result.Normalize();
            return result;
        }

        /// <summary>
        /// Classifies a point relative to the frustum.
        /// </summary>
        /// <param name="point">The point to classify.</param>
        /// <returns>Number of planes the point is behind (0 = inside, 1-6 = partially/fully outside).</returns>
        public int ClassifyPoint({{TYPE_PREFIX}}3 point)
        {
            int planesOutside = 0;
            for (int i = 0; i < 6; i++)
            {
                if (Planes[i].GetSignedDistanceToPoint(point) < -{{EPSILON}})
                {
                    planesOutside++;
                }
            }
            return planesOutside;
        }
        
        /// <summary>
        /// Classifies a sphere relative to the frustum.
        /// </summary>
        /// <param name="sphere">The sphere to classify.</param>
        /// <returns>Number of planes the sphere is completely behind.</returns>
        public int ClassifySphere(Sphere{{TYPE_PREFIX}} sphere)
        {
            int planesOutside = 0;
            for (int i = 0; i < 6; i++)
            {
                {{TYPE}} distance = Planes[i].GetSignedDistanceToPoint(sphere.Center);
                if (distance < -sphere.Radius - {{EPSILON}})
                {
                    planesOutside++;
                }
            }
            return planesOutside;
        }
        
        /// <summary>
        /// Classifies an AABB relative to the frustum.
        /// </summary>
        /// <param name="aabb">The AABB to classify.</param>
        /// <returns>Number of planes the AABB is completely behind.</returns>
        public int ClassifyAABB(AABB{{TYPE_PREFIX}} aabb)
        {
            int planesOutside = 0;
            for (int i = 0; i < 6; i++)
            {
                var classification = Intersection{{TYPE_PREFIX}}.ClassifyAABBToPlane(aabb.Min, aabb.Max, Planes[i].Normal, Planes[i].D);
                if (classification == Intersection{{TYPE_PREFIX}}.PlaneIntersectionType.Back)
                {
                    planesOutside++;
                }
            }
            return planesOutside;
        }
        
        /// <summary>
        /// Checks if the frustum is valid (all planes properly oriented).
        /// </summary>
        /// <returns>True if the frustum is valid.</returns>
        public bool IsValid()
        {
            if (Planes == null || Planes.Length != 6)
                return false;
                
            // Check that all plane normals have reasonable length
            for (int i = 0; i < 6; i++)
            {
                if (Maths.LengthSquared(Planes[i].Normal) < {{EPSILON}} * {{EPSILON}})
                    return false;
            }
            
            return true;
        }
        
        /// <summary>
        /// Creates a frustum from camera parameters.
        /// </summary>
        /// <param name="position">Camera position.</param>
        /// <param name="forward">Camera forward direction (normalized).</param>
        /// <param name="up">Camera up direction (normalized).</param>
        /// <param name="fovY">Vertical field of view in radians.</param>
        /// <param name="aspect">Aspect ratio (width/height).</param>
        /// <param name="nearDist">Near plane distance.</param>
        /// <param name="farDist">Far plane distance.</param>
        /// <returns>The camera frustum.</returns>
        public static {{CLASS_NAME}} FromCamera({{TYPE_PREFIX}}3 position, {{TYPE_PREFIX}}3 forward, {{TYPE_PREFIX}}3 up, 
                                               {{TYPE}} fovY, {{TYPE}} aspect, {{TYPE}} nearDist, {{TYPE}} farDist)
        {
            {{TYPE_PREFIX}}3 right = Maths.Normalize(Maths.Cross(forward, up));
            {{TYPE_PREFIX}}3 actualUp = Maths.Cross(right, forward);
            
            {{TYPE}} halfFovY = fovY / {{TWO}};
            {{TYPE}} tanHalfFovY = Maths.Tan(halfFovY);
            {{TYPE}} tanHalfFovX = tanHalfFovY * aspect;
            
            // Calculate plane normals (pointing inward)
            {{TYPE_PREFIX}}3 nearCenter = position + forward * nearDist;
            {{TYPE_PREFIX}}3 farCenter = position + forward * farDist;
            
            // Near and far planes
            Plane{{TYPE_PREFIX}} near = new Plane{{TYPE_PREFIX}}(forward, Maths.Dot(forward, nearCenter));
            Plane{{TYPE_PREFIX}} far = new Plane{{TYPE_PREFIX}}(-forward, Maths.Dot(-forward, farCenter));
            
            // Side planes
            {{TYPE_PREFIX}}3 leftNormal = Maths.Normalize(Maths.Cross(actualUp, forward + right * tanHalfFovX));
            {{TYPE_PREFIX}}3 rightNormal = Maths.Normalize(Maths.Cross(forward - right * tanHalfFovX, actualUp));
            {{TYPE_PREFIX}}3 topNormal = Maths.Normalize(Maths.Cross(right, forward + actualUp * tanHalfFovY));
            {{TYPE_PREFIX}}3 bottomNormal = Maths.Normalize(Maths.Cross(forward - actualUp * tanHalfFovY, right));
            
            Plane{{TYPE_PREFIX}} p_left = new Plane{{TYPE_PREFIX}}(leftNormal, Maths.Dot(leftNormal, position));
            Plane{{TYPE_PREFIX}} p_right = new Plane{{TYPE_PREFIX}}(rightNormal, Maths.Dot(rightNormal, position));
            Plane{{TYPE_PREFIX}} p_top = new Plane{{TYPE_PREFIX}}(topNormal, Maths.Dot(topNormal, position));
            Plane{{TYPE_PREFIX}} p_bottom = new Plane{{TYPE_PREFIX}}(bottomNormal, Maths.Dot(bottomNormal, position));
            
            return new {{CLASS_NAME}}(near, far, p_left, p_right, p_top, p_bottom);
        }
        
        /// <summary>
        /// Creates an orthographic frustum.
        /// </summary>
        /// <param name="left">Left boundary.</param>
        /// <param name="right">Right boundary.</param>
        /// <param name="bottom">Bottom boundary.</param>
        /// <param name="top">Top boundary.</param>
        /// <param name="nearDist">Near plane distance.</param>
        /// <param name="farDist">Far plane distance.</param>
        /// <returns>The orthographic frustum.</returns>
        public static {{CLASS_NAME}} CreateOrthographic({{TYPE}} left, {{TYPE}} right, {{TYPE}} bottom, 
                                                        {{TYPE}} top, {{TYPE}} nearDist, {{TYPE}} farDist)
        {
            var planes = new Plane{{TYPE_PREFIX}}[6];
            
            // Near and far planes (assuming Z forward)
            planes[0] = new Plane{{TYPE_PREFIX}}(new {{TYPE_PREFIX}}3({{ZERO}}, {{ZERO}}, {{ONE}}), nearDist);
            planes[1] = new Plane{{TYPE_PREFIX}}(new {{TYPE_PREFIX}}3({{ZERO}}, {{ZERO}}, -{{ONE}}), -farDist);
            
            // Side planes
            planes[2] = new Plane{{TYPE_PREFIX}}(new {{TYPE_PREFIX}}3({{ONE}}, {{ZERO}}, {{ZERO}}), -left);    // Left
            planes[3] = new Plane{{TYPE_PREFIX}}(new {{TYPE_PREFIX}}3(-{{ONE}}, {{ZERO}}, {{ZERO}}), right);   // Right
            planes[4] = new Plane{{TYPE_PREFIX}}(new {{TYPE_PREFIX}}3({{ZERO}}, -{{ONE}}, {{ZERO}}), top);     // Top
            planes[5] = new Plane{{TYPE_PREFIX}}(new {{TYPE_PREFIX}}3({{ZERO}}, {{ONE}}, {{ZERO}}), -bottom);  // Bottom
            
            return new {{CLASS_NAME}}(planes);
        }
        
        /// <summary>
        /// Expands the frustum by a given amount along all plane normals.
        /// </summary>
        /// <param name="amount">Amount to expand by.</param>
        public void Expand({{TYPE}} amount)
        {
            for (int i = 0; i < 6; i++)
            {
                Planes[i] = new Plane{{TYPE_PREFIX}}(Planes[i].Normal, Planes[i].D - amount);
            }
        }
        
        /// <summary>
        /// Returns an expanded version of this frustum.
        /// </summary>
        /// <param name="amount">Amount to expand by.</param>
        /// <returns>The expanded frustum.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public {{CLASS_NAME}} Expanded({{TYPE}} amount)
        {
            var result = this;
            result.Expand(amount);
            return result;
        }
        
        // --- IEquatable & IFormattable Implementation ---
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals({{CLASS_NAME}} other)
        {
            if (Planes == null && other.Planes == null) return true;
            if (Planes == null || other.Planes == null) return false;
            if (Planes.Length != other.Planes.Length) return false;
            
            for (int i = 0; i < Planes.Length; i++)
            {
                if (!Planes[i].Equals(other.Planes[i]))
                    return false;
            }
            return true;
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object? obj) => obj is {{CLASS_NAME}} other && Equals(other);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            if (Planes == null) return 0;
            
            var hash = new HashCode();
            for (int i = 0; i < Planes.Length; i++)
            {
                hash.Add(Planes[i]);
            }
            return hash.ToHashCode();
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString() => ToString(null, CultureInfo.CurrentCulture);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string? format, IFormatProvider? formatProvider = null)
        {
            if (Planes == null)
                return "{{CLASS_NAME}}(null)";
                
            return string.Format(formatProvider, 
                "{{CLASS_NAME}}(Near: {0}, Far: {1}, Left: {2}, Right: {3}, Top: {4}, Bottom: {5})",
                Planes[0].ToString(format, formatProvider),
                Planes[1].ToString(format, formatProvider),
                Planes[2].ToString(format, formatProvider),
                Planes[3].ToString(format, formatProvider),
                Planes[4].ToString(format, formatProvider),
                Planes[5].ToString(format, formatProvider));
        }
        
        public static bool operator ==({{CLASS_NAME}} left, {{CLASS_NAME}} right) => left.Equals(right);
        public static bool operator !=({{CLASS_NAME}} left, {{CLASS_NAME}} right) => !left.Equals(right);
    }
}
