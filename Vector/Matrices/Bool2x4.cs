//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-04 01:00:58
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 2x4 matrix of bools.</summary>
[System.Serializable]
public partial struct Bool2x4 : System.IEquatable<Bool2x4>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public Bool2 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public Bool2 c1;
	/// <summary>Column 2 of the matrix.</summary>
	public Bool2 c2;
	/// <summary>Column 3 of the matrix.</summary>
	public Bool2 c3;

	/// <summary>Bool2x4 zero value.</summary>
	public static readonly Bool2x4 Zero = new Bool2x4(new Bool2(false), new Bool2(false), new Bool2(false), new Bool2(false));

	/// <summary>Constructs a Bool2x4 matrix from 4 Bool2 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2x4(Bool2 col0, Bool2 col1, Bool2 col2, Bool2 col3)
	{
		this.c0 = col0;
		this.c1 = col1;
		this.c2 = col2;
		this.c3 = col3;
	}

	/// <summary>Constructs a Bool2x4 matrix from 8 bool values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2x4(bool m00, bool m01, bool m02, bool m03, bool m10, bool m11, bool m12, bool m13)
	{
		this.c0 = new Bool2(m00, m10);
		this.c1 = new Bool2(m01, m11);
		this.c2 = new Bool2(m02, m12);
		this.c3 = new Bool2(m03, m13);
	}

	/// <summary>Returns a reference to the Bool2 (column) at a specified index.</summary>
	unsafe public ref Bool2 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

			fixed (Bool2* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public bool this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool[] ToArray()
	{
		bool[] array = new bool[8];
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 4; j++)
				array[i * 4 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Bool2x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

	public override bool Equals(object? o) { return o is Bool2x4 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			hash = hash * 23 + c2.GetHashCode();
			hash = hash * 23 + c3.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("Bool2x4(");
		sb.Append(this.c0.X.ToString(formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.X.ToString(formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.X.ToString(formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Y.ToString(formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Y.ToString(formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
