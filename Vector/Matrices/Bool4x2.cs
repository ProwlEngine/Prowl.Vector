//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-13 20:47:09
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{
    /// <summary>A 4x2 matrix of bools.</summary>
    [System.Serializable]
    public partial struct Bool4x2 : System.IEquatable<Bool4x2>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public Bool4 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public Bool4 c1;

        /// <summary>Bool4x2 zero value.</summary>
        public static readonly Bool4x2 Zero = new Bool4x2(new Bool4(false), new Bool4(false));

        /// <summary>Constructs a Bool4x2 matrix from 2 Bool4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4x2(Bool4 col0, Bool4 col1)
        {
            this.c0 = col0;
            this.c1 = col1;
        }

        /// <summary>Constructs a Bool4x2 matrix from 8 bool values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4x2(bool m00, bool m01, bool m10, bool m11, bool m20, bool m21, bool m30, bool m31)
        {
            this.c0 = new Bool4(m00, m10, m20, m30);
            this.c1 = new Bool4(m01, m11, m21, m31);
        }

        /// <summary>Returns a reference to the Bool4 (column) at a specified index.</summary>
        unsafe public ref Bool4 this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)index >= 2)
                    throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 1, but was {index}.");

                fixed (Bool4* pC0 = &this.c0)
                {
                    return ref pC0[index];
                }
            }
        }

        /// <summary>Returns the element at row and column indices.</summary>
        public bool this[int row, int column]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)column >= 2)
                    throw new System.ArgumentOutOfRangeException(nameof(column));
                return this[column][row];
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                if ((uint)column >= 2)
                    throw new System.ArgumentOutOfRangeException(nameof(column));
                var temp = this[column];
                temp[row] = value;
                this[column] = temp;
            }
        }
        /// <summary>Returns an array of components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool[] ToArray()
        {
            bool[] array = new bool[8];
            for (int i = 0; i < 4; i++)
                for (int j = 0; j < 2; j++)
                    array[i * 2 + j] = this[i, j];
            return array;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Bool4x2 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1); }

        public override bool Equals(object o) { return o is Bool4x2 converted && Equals(converted); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = 17;
                hash = hash * 23 + c0.GetHashCode();
                hash = hash * 23 + c1.GetHashCode();
                return hash;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("Bool4x2(");
            sb.Append(this.c0.X.ToString(formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.X.ToString(formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Y.ToString(formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Y.ToString(formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Z.ToString(formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Z.ToString(formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.W.ToString(formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.W.ToString(formatProvider));
            sb.Append(")");
            return sb.ToString();
        }

    }
}
