//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-11 13:18:35
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 3x2 matrix of doubles.</summary>
[System.Serializable]
public partial struct Double3x2 : System.IEquatable<Double3x2>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public Double3 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public Double3 c1;

	/// <summary>Double3x2 zero value.</summary>
	public static readonly Double3x2 Zero = new Double3x2(Double3.Zero, Double3.Zero);

	/// <summary>Constructs a Double3x2 matrix from 2 Double3 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double3x2(Double3 col0, Double3 col1)
	{
		this.c0 = col0;
		this.c1 = col1;
	}

	/// <summary>Constructs a Double3x2 matrix from 6 double values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double3x2(double m00, double m01, double m10, double m11, double m20, double m21)
	{
		this.c0 = new Double3(m00, m10, m20);
		this.c1 = new Double3(m01, m11, m21);
	}

	/// <summary>Constructs a Double3x2 matrix from a single double value by assigning it to every component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double3x2(double v)
	{
		this.c0 = new Double3(v);
		this.c1 = new Double3(v);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator +(Double3x2 lhs, Double3x2 rhs) { return new Double3x2(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator +(Double3x2 lhs, double rhs) { return new Double3x2(lhs.c0 + rhs, lhs.c1 + rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator +(double lhs, Double3x2 rhs) { return new Double3x2(lhs + rhs.c0, lhs + rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator -(Double3x2 lhs, Double3x2 rhs) { return new Double3x2(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator -(Double3x2 lhs, double rhs) { return new Double3x2(lhs.c0 - rhs, lhs.c1 - rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator -(double lhs, Double3x2 rhs) { return new Double3x2(lhs - rhs.c0, lhs - rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator /(Double3x2 lhs, Double3x2 rhs) { return new Double3x2(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator /(Double3x2 lhs, double rhs) { return new Double3x2(lhs.c0 / rhs, lhs.c1 / rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator /(double lhs, Double3x2 rhs) { return new Double3x2(lhs / rhs.c0, lhs / rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator %(Double3x2 lhs, Double3x2 rhs) { return new Double3x2(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator %(Double3x2 lhs, double rhs) { return new Double3x2(lhs.c0 % rhs, lhs.c1 % rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator %(double lhs, Double3x2 rhs) { return new Double3x2(lhs % rhs.c0, lhs % rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double3x2 operator -(Double3x2 val) { return new Double3x2(-val.c0, -val.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator <(Double3x2 lhs, Double3x2 rhs) { return new Bool3x2(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator <(Double3x2 lhs, double rhs) { return new Bool3x2(lhs.c0 < rhs, lhs.c1 < rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator <(double lhs, Double3x2 rhs) { return new Bool3x2(lhs < rhs.c0, lhs < rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator <=(Double3x2 lhs, Double3x2 rhs) { return new Bool3x2(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator <=(Double3x2 lhs, double rhs) { return new Bool3x2(lhs.c0 <= rhs, lhs.c1 <= rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator <=(double lhs, Double3x2 rhs) { return new Bool3x2(lhs <= rhs.c0, lhs <= rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator >(Double3x2 lhs, Double3x2 rhs) { return new Bool3x2(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator >(Double3x2 lhs, double rhs) { return new Bool3x2(lhs.c0 > rhs, lhs.c1 > rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator >(double lhs, Double3x2 rhs) { return new Bool3x2(lhs > rhs.c0, lhs > rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator >=(Double3x2 lhs, Double3x2 rhs) { return new Bool3x2(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator >=(Double3x2 lhs, double rhs) { return new Bool3x2(lhs.c0 >= rhs, lhs.c1 >= rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator >=(double lhs, Double3x2 rhs) { return new Bool3x2(lhs >= rhs.c0, lhs >= rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator ==(Double3x2 lhs, Double3x2 rhs) { return new Bool3x2(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator ==(Double3x2 lhs, double rhs) { return new Bool3x2(lhs.c0 == rhs, lhs.c1 == rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator ==(double lhs, Double3x2 rhs) { return new Bool3x2(lhs == rhs.c0, lhs == rhs.c1); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator !=(Double3x2 lhs, Double3x2 rhs) { return new Bool3x2(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator !=(Double3x2 lhs, double rhs) { return new Bool3x2(lhs.c0 != rhs, lhs.c1 != rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x2 operator !=(double lhs, Double3x2 rhs) { return new Bool3x2(lhs != rhs.c0, lhs != rhs.c1); }

	/// <summary>Returns a reference to the Double3 (column) at a specified index.</summary>
	unsafe public ref Double3 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 2)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 1, but was {index}.");

			fixed (Double3* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public double this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 2)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 2)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public double[] ToArray()
	{
		double[] array = new double[6];
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 2; j++)
				array[i * 2 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Double3x2 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1); }

	public override bool Equals(object? o) { return o is Double3x2 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("Double3x2(");
		sb.Append(this.c0.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Z.ToString(format, formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
