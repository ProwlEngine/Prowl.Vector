//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-10-10 14:02:57
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 4x4 matrix of doubles.</summary>
[System.Serializable]
public partial struct Double4x4 : System.IEquatable<Double4x4>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public Double4 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public Double4 c1;
	/// <summary>Column 2 of the matrix.</summary>
	public Double4 c2;
	/// <summary>Column 3 of the matrix.</summary>
	public Double4 c3;

	/// <summary>Double4x4 identity transform.</summary>
	public static readonly Double4x4 Identity = new Double4x4(new Double4(1.0, 0.0, 0.0, 0.0), new Double4(0.0, 1.0, 0.0, 0.0), new Double4(0.0, 0.0, 1.0, 0.0), new Double4(0.0, 0.0, 0.0, 1.0));

	/// <summary>Double4x4 zero value.</summary>
	public static readonly Double4x4 Zero = new Double4x4(Double4.Zero, Double4.Zero, Double4.Zero, Double4.Zero);

	/// <summary>Gets or sets the translation component of the matrix.</summary>
	public Double4 Translation
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)] get => c3;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] set => c3 = value;
	}

	/// <summary>Constructs a Double4x4 matrix from 4 Double4 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4x4(Double4 col0, Double4 col1, Double4 col2, Double4 col3)
	{
		this.c0 = col0;
		this.c1 = col1;
		this.c2 = col2;
		this.c3 = col3;
	}

	/// <summary>Constructs a Double4x4 matrix from 16 double values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4x4(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23, double m30, double m31, double m32, double m33)
	{
		this.c0 = new Double4(m00, m10, m20, m30);
		this.c1 = new Double4(m01, m11, m21, m31);
		this.c2 = new Double4(m02, m12, m22, m32);
		this.c3 = new Double4(m03, m13, m23, m33);
	}

	/// <summary>Constructs a Double4x4 matrix from a single double value by assigning it to every component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4x4(double v)
	{
		this.c0 = new Double4(v);
		this.c1 = new Double4(v);
		this.c2 = new Double4(v);
		this.c3 = new Double4(v);
	}

	/// <summary>Constructs a Double4x4 from a Float4x4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4x4(Float4x4 m)
	{
		this.c0 = new Double4(m.c0);
		this.c1 = new Double4(m.c1);
		this.c2 = new Double4(m.c2);
		this.c3 = new Double4(m.c3);
	}

	/// <summary>Constructs a Double4x4 from a Int4x4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4x4(Int4x4 m)
	{
		this.c0 = new Double4(m.c0);
		this.c1 = new Double4(m.c1);
		this.c2 = new Double4(m.c2);
		this.c3 = new Double4(m.c3);
	}

	/// <summary>Constructs a Double4x4 from a UInt4x4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4x4(UInt4x4 m)
	{
		this.c0 = new Double4(m.c0);
		this.c1 = new Double4(m.c1);
		this.c2 = new Double4(m.c2);
		this.c3 = new Double4(m.c3);
	}

	/// <summary>Returns a reference to the Double4 (column) at a specified index.</summary>
	unsafe public ref Double4 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

			fixed (Double4* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public double this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	// --- Component-wise Operators ---
	/// <summary>Returns the component-wise + of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator +(Double4x4 lhs, Double4x4 rhs) => new Double4x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3);

	/// <summary>Returns the component-wise + of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator +(Double4x4 lhs, double rhs) => new Double4x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs);

	/// <summary>Returns the component-wise + of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator +(double lhs, Double4x4 rhs) => new Double4x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3);

	/// <summary>Returns the component-wise - of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator -(Double4x4 lhs, Double4x4 rhs) => new Double4x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3);

	/// <summary>Returns the component-wise - of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator -(Double4x4 lhs, double rhs) => new Double4x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs);

	/// <summary>Returns the component-wise - of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator -(double lhs, Double4x4 rhs) => new Double4x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3);

	/// <summary>Returns the component-wise * of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator *(Double4x4 lhs, Double4x4 rhs) => new Double4x4(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2, lhs.c3 * rhs.c3);

	/// <summary>Returns the component-wise * of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator *(Double4x4 lhs, double rhs) => new Double4x4(lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs, lhs.c3 * rhs);

	/// <summary>Returns the component-wise * of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator *(double lhs, Double4x4 rhs) => new Double4x4(lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2, lhs * rhs.c3);

	/// <summary>Returns the component-wise / of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator /(Double4x4 lhs, Double4x4 rhs) => new Double4x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3);

	/// <summary>Returns the component-wise / of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator /(Double4x4 lhs, double rhs) => new Double4x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs);

	/// <summary>Returns the component-wise / of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator /(double lhs, Double4x4 rhs) => new Double4x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3);

	/// <summary>Returns the component-wise % of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator %(Double4x4 lhs, Double4x4 rhs) => new Double4x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3);

	/// <summary>Returns the component-wise % of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator %(Double4x4 lhs, double rhs) => new Double4x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs);

	/// <summary>Returns the component-wise % of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator %(double lhs, Double4x4 rhs) => new Double4x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3);

	/// <summary>Returns the component-wise negation of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Double4x4 operator -(Double4x4 val) => new Double4x4(-val.c0, -val.c1, -val.c2, -val.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator <(Double4x4 lhs, Double4x4 rhs) => new Bool4x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator <(Double4x4 lhs, double rhs) => new Bool4x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs);

	/// <summary>Returns a Bool4x4 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator <(double lhs, Double4x4 rhs) => new Bool4x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator <=(Double4x4 lhs, Double4x4 rhs) => new Bool4x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator <=(Double4x4 lhs, double rhs) => new Bool4x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs);

	/// <summary>Returns a Bool4x4 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator <=(double lhs, Double4x4 rhs) => new Bool4x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator >(Double4x4 lhs, Double4x4 rhs) => new Bool4x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator >(Double4x4 lhs, double rhs) => new Bool4x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs);

	/// <summary>Returns a Bool4x4 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator >(double lhs, Double4x4 rhs) => new Bool4x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator >=(Double4x4 lhs, Double4x4 rhs) => new Bool4x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator >=(Double4x4 lhs, double rhs) => new Bool4x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs);

	/// <summary>Returns a Bool4x4 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator >=(double lhs, Double4x4 rhs) => new Bool4x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator ==(Double4x4 lhs, Double4x4 rhs) => new Bool4x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator ==(Double4x4 lhs, double rhs) => new Bool4x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs);

	/// <summary>Returns a Bool4x4 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator ==(double lhs, Double4x4 rhs) => new Bool4x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator !=(Double4x4 lhs, Double4x4 rhs) => new Bool4x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3);

	/// <summary>Returns a Bool4x4 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator !=(Double4x4 lhs, double rhs) => new Bool4x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs);

	/// <summary>Returns a Bool4x4 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4x4 operator !=(double lhs, Double4x4 rhs) => new Bool4x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3);

	// --- Cross-Type Casting Operators ---
	/// <summary>Implicitly converts a Float4x4 to a Double4x4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Double4x4(Float4x4 m)
	{
		return new Double4x4((Double4)m.c0, (Double4)m.c1, (Double4)m.c2, (Double4)m.c3);
	}

	/// <summary>Implicitly converts a Int4x4 to a Double4x4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Double4x4(Int4x4 m)
	{
		return new Double4x4((Double4)m.c0, (Double4)m.c1, (Double4)m.c2, (Double4)m.c3);
	}

	/// <summary>Implicitly converts a UInt4x4 to a Double4x4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Double4x4(UInt4x4 m)
	{
		return new Double4x4((Double4)m.c0, (Double4)m.c1, (Double4)m.c2, (Double4)m.c3);
	}

	// --- Matrix Methods ---
	/// <summary>Gets the transpose of this matrix.</summary>
	public Double4x4 Transpose
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Transpose(this);
	}

	/// <summary>Gets the determinant of this matrix.</summary>
	public double Determinant
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Determinant(this);
	}

	/// <summary>Gets the inverse of this matrix.</summary>
	public Double4x4 Inverse
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Inverse(this);
	}

	/// <summary>Checks if this matrix is invertible.</summary>
	public bool IsInvertible
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Abs(Determinant) > 1e-14;
	}

	/// <summary>Gets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4 GetRow0()
	{
		return new Double4(c0.X, c1.X, c2.X, c3.X);
	}

	/// <summary>Sets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow0(Double4 value)
	{
		c0.X = value.X;
		c1.X = value.Y;
		c2.X = value.Z;
		c3.X = value.W;
	}

	/// <summary>Gets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4 GetRow1()
	{
		return new Double4(c0.Y, c1.Y, c2.Y, c3.Y);
	}

	/// <summary>Sets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow1(Double4 value)
	{
		c0.Y = value.X;
		c1.Y = value.Y;
		c2.Y = value.Z;
		c3.Y = value.W;
	}

	/// <summary>Gets row 2 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4 GetRow2()
	{
		return new Double4(c0.Z, c1.Z, c2.Z, c3.Z);
	}

	/// <summary>Sets row 2 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow2(Double4 value)
	{
		c0.Z = value.X;
		c1.Z = value.Y;
		c2.Z = value.Z;
		c3.Z = value.W;
	}

	/// <summary>Gets row 3 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Double4 GetRow3()
	{
		return new Double4(c0.W, c1.W, c2.W, c3.W);
	}

	/// <summary>Sets row 3 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow3(Double4 value)
	{
		c0.W = value.X;
		c1.W = value.Y;
		c2.W = value.Z;
		c3.W = value.W;
	}

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public double[] ToArray()
	{
		double[] array = new double[16];
		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 4; j++)
				array[i * 4 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Double4x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

	public override bool Equals(object? o) { return o is Double4x4 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			hash = hash * 23 + c2.GetHashCode();
			hash = hash * 23 + c3.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("Double4x4(");
		sb.Append(this.c0.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.W.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.W.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.W.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.W.ToString(format, formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
