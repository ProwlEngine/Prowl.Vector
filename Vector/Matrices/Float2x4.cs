//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-14 10:56:39
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{
    /// <summary>A 2x4 matrix of floats.</summary>
    [System.Serializable]
    public partial struct Float2x4 : System.IEquatable<Float2x4>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public Float2 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public Float2 c1;
        /// <summary>Column 2 of the matrix.</summary>
        public Float2 c2;
        /// <summary>Column 3 of the matrix.</summary>
        public Float2 c3;

        /// <summary>Float2x4 zero value.</summary>
        public static readonly Float2x4 Zero = new Float2x4(Float2.Zero, Float2.Zero, Float2.Zero, Float2.Zero);

        /// <summary>Constructs a Float2x4 matrix from 4 Float2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float2x4(Float2 col0, Float2 col1, Float2 col2, Float2 col3)
        {
            this.c0 = col0;
            this.c1 = col1;
            this.c2 = col2;
            this.c3 = col3;
        }

        /// <summary>Constructs a Float2x4 matrix from 8 float values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float2x4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13)
        {
            this.c0 = new Float2(m00, m10);
            this.c1 = new Float2(m01, m11);
            this.c2 = new Float2(m02, m12);
            this.c3 = new Float2(m03, m13);
        }

        /// <summary>Constructs a Float2x4 matrix from a single float value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float2x4(float v)
        {
            this.c0 = new Float2(v);
            this.c1 = new Float2(v);
            this.c2 = new Float2(v);
            this.c3 = new Float2(v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator +(Float2x4 lhs, Float2x4 rhs) { return new Float2x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator +(Float2x4 lhs, float rhs) { return new Float2x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator +(float lhs, Float2x4 rhs) { return new Float2x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator -(Float2x4 lhs, Float2x4 rhs) { return new Float2x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator -(Float2x4 lhs, float rhs) { return new Float2x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator -(float lhs, Float2x4 rhs) { return new Float2x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator /(Float2x4 lhs, Float2x4 rhs) { return new Float2x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator /(Float2x4 lhs, float rhs) { return new Float2x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator /(float lhs, Float2x4 rhs) { return new Float2x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator %(Float2x4 lhs, Float2x4 rhs) { return new Float2x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator %(Float2x4 lhs, float rhs) { return new Float2x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator %(float lhs, Float2x4 rhs) { return new Float2x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float2x4 operator -(Float2x4 val) { return new Float2x4(-val.c0, -val.c1, -val.c2, -val.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator <(Float2x4 lhs, Float2x4 rhs) { return new Bool2x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator <(Float2x4 lhs, float rhs) { return new Bool2x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator <(float lhs, Float2x4 rhs) { return new Bool2x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator <=(Float2x4 lhs, Float2x4 rhs) { return new Bool2x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator <=(Float2x4 lhs, float rhs) { return new Bool2x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator <=(float lhs, Float2x4 rhs) { return new Bool2x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator >(Float2x4 lhs, Float2x4 rhs) { return new Bool2x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator >(Float2x4 lhs, float rhs) { return new Bool2x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator >(float lhs, Float2x4 rhs) { return new Bool2x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator >=(Float2x4 lhs, Float2x4 rhs) { return new Bool2x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator >=(Float2x4 lhs, float rhs) { return new Bool2x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator >=(float lhs, Float2x4 rhs) { return new Bool2x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator ==(Float2x4 lhs, Float2x4 rhs) { return new Bool2x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator ==(Float2x4 lhs, float rhs) { return new Bool2x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator ==(float lhs, Float2x4 rhs) { return new Bool2x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator !=(Float2x4 lhs, Float2x4 rhs) { return new Bool2x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator !=(Float2x4 lhs, float rhs) { return new Bool2x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2x4 operator !=(float lhs, Float2x4 rhs) { return new Bool2x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3); }

        /// <summary>Returns a reference to the Float2 (column) at a specified index.</summary>
        unsafe public ref Float2 this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)index >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

                fixed (Float2* pC0 = &this.c0)
                {
                    return ref pC0[index];
                }
            }
        }

        /// <summary>Returns the element at row and column indices.</summary>
        public float this[int row, int column]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)column >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(column));
                return this[column][row];
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                if ((uint)column >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(column));
                var temp = this[column];
                temp[row] = value;
                this[column] = temp;
            }
        }
        /// <summary>Returns an array of components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float[] ToArray()
        {
            float[] array = new float[8];
            for (int i = 0; i < 2; i++)
                for (int j = 0; j < 4; j++)
                    array[i * 4 + j] = this[i, j];
            return array;
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Float2x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

        public override bool Equals(object o) { return o is Float2x4 converted && Equals(converted); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = 17;
                hash = hash * 23 + c0.GetHashCode();
                hash = hash * 23 + c1.GetHashCode();
                hash = hash * 23 + c2.GetHashCode();
                hash = hash * 23 + c3.GetHashCode();
                return hash;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("Float2x4(");
            sb.Append(this.c0.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.Y.ToString(format, formatProvider));
            sb.Append(")");
            return sb.ToString();
        }

    }
}
