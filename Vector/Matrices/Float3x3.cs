//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-10-10 14:13:41
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 3x3 matrix of floats.</summary>
[System.Serializable]
public partial struct Float3x3 : System.IEquatable<Float3x3>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public Float3 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public Float3 c1;
	/// <summary>Column 2 of the matrix.</summary>
	public Float3 c2;

	/// <summary>Float3x3 identity transform.</summary>
	public static readonly Float3x3 Identity = new Float3x3(new Float3(1f, 0f, 0f), new Float3(0f, 1f, 0f), new Float3(0f, 0f, 1f));

	/// <summary>Float3x3 zero value.</summary>
	public static readonly Float3x3 Zero = new Float3x3(Float3.Zero, Float3.Zero, Float3.Zero);

	/// <summary>Gets or sets the translation component of the matrix.</summary>
	public Float3 Translation
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)] get => c2;
		[MethodImpl(MethodImplOptions.AggressiveInlining)] set => c2 = value;
	}

	/// <summary>Constructs a Float3x3 matrix from 3 Float3 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3x3(Float3 col0, Float3 col1, Float3 col2)
	{
		this.c0 = col0;
		this.c1 = col1;
		this.c2 = col2;
	}

	/// <summary>Constructs a Float3x3 matrix from 9 float values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3x3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22)
	{
		this.c0 = new Float3(m00, m10, m20);
		this.c1 = new Float3(m01, m11, m21);
		this.c2 = new Float3(m02, m12, m22);
	}

	/// <summary>Constructs a Float3x3 matrix from a single float value by assigning it to every component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3x3(float v)
	{
		this.c0 = new Float3(v);
		this.c1 = new Float3(v);
		this.c2 = new Float3(v);
	}

	/// <summary>Constructs a Float3x3 from a Double3x3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3x3(Double3x3 m)
	{
		this.c0 = new Float3(m.c0);
		this.c1 = new Float3(m.c1);
		this.c2 = new Float3(m.c2);
	}

	/// <summary>Constructs a Float3x3 from a Int3x3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3x3(Int3x3 m)
	{
		this.c0 = new Float3(m.c0);
		this.c1 = new Float3(m.c1);
		this.c2 = new Float3(m.c2);
	}

	/// <summary>Constructs a Float3x3 from a UInt3x3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3x3(UInt3x3 m)
	{
		this.c0 = new Float3(m.c0);
		this.c1 = new Float3(m.c1);
		this.c2 = new Float3(m.c2);
	}

	/// <summary>Returns a reference to the Float3 (column) at a specified index.</summary>
	unsafe public ref Float3 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 3)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 2, but was {index}.");

			fixed (Float3* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public float this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 3)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 3)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	// --- Component-wise Operators ---
	/// <summary>Returns the component-wise + of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator +(Float3x3 lhs, Float3x3 rhs) => new Float3x3(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2);

	/// <summary>Returns the component-wise + of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator +(Float3x3 lhs, float rhs) => new Float3x3(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs);

	/// <summary>Returns the component-wise + of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator +(float lhs, Float3x3 rhs) => new Float3x3(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2);

	/// <summary>Returns the component-wise - of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator -(Float3x3 lhs, Float3x3 rhs) => new Float3x3(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2);

	/// <summary>Returns the component-wise - of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator -(Float3x3 lhs, float rhs) => new Float3x3(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs);

	/// <summary>Returns the component-wise - of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator -(float lhs, Float3x3 rhs) => new Float3x3(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2);

	/// <summary>Returns the component-wise * of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator *(Float3x3 lhs, Float3x3 rhs) => new Float3x3(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2);

	/// <summary>Returns the component-wise * of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator *(Float3x3 lhs, float rhs) => new Float3x3(lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs);

	/// <summary>Returns the component-wise * of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator *(float lhs, Float3x3 rhs) => new Float3x3(lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2);

	/// <summary>Returns the component-wise / of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator /(Float3x3 lhs, Float3x3 rhs) => new Float3x3(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2);

	/// <summary>Returns the component-wise / of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator /(Float3x3 lhs, float rhs) => new Float3x3(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs);

	/// <summary>Returns the component-wise / of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator /(float lhs, Float3x3 rhs) => new Float3x3(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2);

	/// <summary>Returns the component-wise % of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator %(Float3x3 lhs, Float3x3 rhs) => new Float3x3(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2);

	/// <summary>Returns the component-wise % of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator %(Float3x3 lhs, float rhs) => new Float3x3(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs);

	/// <summary>Returns the component-wise % of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator %(float lhs, Float3x3 rhs) => new Float3x3(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2);

	/// <summary>Returns the component-wise negation of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Float3x3 operator -(Float3x3 val) => new Float3x3(-val.c0, -val.c1, -val.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator <(Float3x3 lhs, Float3x3 rhs) => new Bool3x3(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator <(Float3x3 lhs, float rhs) => new Bool3x3(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs);

	/// <summary>Returns a Bool3x3 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator <(float lhs, Float3x3 rhs) => new Bool3x3(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator <=(Float3x3 lhs, Float3x3 rhs) => new Bool3x3(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator <=(Float3x3 lhs, float rhs) => new Bool3x3(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs);

	/// <summary>Returns a Bool3x3 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator <=(float lhs, Float3x3 rhs) => new Bool3x3(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator >(Float3x3 lhs, Float3x3 rhs) => new Bool3x3(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator >(Float3x3 lhs, float rhs) => new Bool3x3(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs);

	/// <summary>Returns a Bool3x3 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator >(float lhs, Float3x3 rhs) => new Bool3x3(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator >=(Float3x3 lhs, Float3x3 rhs) => new Bool3x3(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator >=(Float3x3 lhs, float rhs) => new Bool3x3(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs);

	/// <summary>Returns a Bool3x3 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator >=(float lhs, Float3x3 rhs) => new Bool3x3(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator ==(Float3x3 lhs, Float3x3 rhs) => new Bool3x3(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator ==(Float3x3 lhs, float rhs) => new Bool3x3(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs);

	/// <summary>Returns a Bool3x3 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator ==(float lhs, Float3x3 rhs) => new Bool3x3(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator !=(Float3x3 lhs, Float3x3 rhs) => new Bool3x3(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2);

	/// <summary>Returns a Bool3x3 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator !=(Float3x3 lhs, float rhs) => new Bool3x3(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs);

	/// <summary>Returns a Bool3x3 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x3 operator !=(float lhs, Float3x3 rhs) => new Bool3x3(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2);

	// --- Cross-Type Casting Operators ---
	/// <summary>Explicitly converts a Double3x3 to a Float3x3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Float3x3(Double3x3 m)
	{
		return new Float3x3((Float3)m.c0, (Float3)m.c1, (Float3)m.c2);
	}

	/// <summary>Implicitly converts a Int3x3 to a Float3x3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Float3x3(Int3x3 m)
	{
		return new Float3x3((Float3)m.c0, (Float3)m.c1, (Float3)m.c2);
	}

	/// <summary>Implicitly converts a UInt3x3 to a Float3x3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Float3x3(UInt3x3 m)
	{
		return new Float3x3((Float3)m.c0, (Float3)m.c1, (Float3)m.c2);
	}

	// --- Matrix Methods ---
	/// <summary>Gets the transpose of this matrix.</summary>
	public Float3x3 Transpose
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Transpose(this);
	}

	/// <summary>Gets the determinant of this matrix.</summary>
	public float Determinant
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Determinant(this);
	}

	/// <summary>Gets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3 GetRow0()
	{
		return new Float3(c0.X, c1.X, c2.X);
	}

	/// <summary>Sets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow0(Float3 value)
	{
		c0.X = value.X;
		c1.X = value.Y;
		c2.X = value.Z;
	}

	/// <summary>Gets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3 GetRow1()
	{
		return new Float3(c0.Y, c1.Y, c2.Y);
	}

	/// <summary>Sets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow1(Float3 value)
	{
		c0.Y = value.X;
		c1.Y = value.Y;
		c2.Y = value.Z;
	}

	/// <summary>Gets row 2 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Float3 GetRow2()
	{
		return new Float3(c0.Z, c1.Z, c2.Z);
	}

	/// <summary>Sets row 2 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow2(Float3 value)
	{
		c0.Z = value.X;
		c1.Z = value.Y;
		c2.Z = value.Z;
	}

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public float[] ToArray()
	{
		float[] array = new float[9];
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++)
				array[i * 3 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Float3x3 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2); }

	public override bool Equals(object? o) { return o is Float3x3 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			hash = hash * 23 + c2.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("Float3x3(");
		sb.Append(this.c0.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Z.ToString(format, formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
