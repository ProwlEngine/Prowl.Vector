//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-10-09 16:49:56
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 2x3 matrix of ints.</summary>
[System.Serializable]
public partial struct Int2x3 : System.IEquatable<Int2x3>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public Int2 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public Int2 c1;
	/// <summary>Column 2 of the matrix.</summary>
	public Int2 c2;

	/// <summary>Int2x3 zero value.</summary>
	public static readonly Int2x3 Zero = new Int2x3(Int2.Zero, Int2.Zero, Int2.Zero);

	/// <summary>Constructs a Int2x3 matrix from 3 Int2 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int2x3(Int2 col0, Int2 col1, Int2 col2)
	{
		this.c0 = col0;
		this.c1 = col1;
		this.c2 = col2;
	}

	/// <summary>Constructs a Int2x3 matrix from 6 int values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int2x3(int m00, int m01, int m02, int m10, int m11, int m12)
	{
		this.c0 = new Int2(m00, m10);
		this.c1 = new Int2(m01, m11);
		this.c2 = new Int2(m02, m12);
	}

	/// <summary>Constructs a Int2x3 matrix from a single int value by assigning it to every component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int2x3(int v)
	{
		this.c0 = new Int2(v);
		this.c1 = new Int2(v);
		this.c2 = new Int2(v);
	}

	/// <summary>Constructs a Int2x3 from a Float2x3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int2x3(Float2x3 m)
	{
		this.c0 = new Int2(m.c0);
		this.c1 = new Int2(m.c1);
		this.c2 = new Int2(m.c2);
	}

	/// <summary>Constructs a Int2x3 from a Double2x3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int2x3(Double2x3 m)
	{
		this.c0 = new Int2(m.c0);
		this.c1 = new Int2(m.c1);
		this.c2 = new Int2(m.c2);
	}

	/// <summary>Constructs a Int2x3 from a UInt2x3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int2x3(UInt2x3 m)
	{
		this.c0 = new Int2(m.c0);
		this.c1 = new Int2(m.c1);
		this.c2 = new Int2(m.c2);
	}

	/// <summary>Returns a reference to the Int2 (column) at a specified index.</summary>
	unsafe public ref Int2 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 3)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 2, but was {index}.");

			fixed (Int2* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public int this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 3)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 3)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	// --- Component-wise Operators ---
	/// <summary>Returns the component-wise + of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator +(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2);

	/// <summary>Returns the component-wise + of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator +(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs);

	/// <summary>Returns the component-wise + of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator +(int lhs, Int2x3 rhs) => new Int2x3(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2);

	/// <summary>Returns the component-wise - of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator -(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2);

	/// <summary>Returns the component-wise - of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator -(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs);

	/// <summary>Returns the component-wise - of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator -(int lhs, Int2x3 rhs) => new Int2x3(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2);

	/// <summary>Returns the component-wise * of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator *(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2);

	/// <summary>Returns the component-wise * of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator *(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs);

	/// <summary>Returns the component-wise * of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator *(int lhs, Int2x3 rhs) => new Int2x3(lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2);

	/// <summary>Returns the component-wise / of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator /(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2);

	/// <summary>Returns the component-wise / of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator /(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs);

	/// <summary>Returns the component-wise / of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator /(int lhs, Int2x3 rhs) => new Int2x3(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2);

	/// <summary>Returns the component-wise % of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator %(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2);

	/// <summary>Returns the component-wise % of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator %(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs);

	/// <summary>Returns the component-wise % of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator %(int lhs, Int2x3 rhs) => new Int2x3(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2);

	/// <summary>Returns the component-wise & of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator &(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 & rhs.c0, lhs.c1 & rhs.c1, lhs.c2 & rhs.c2);

	/// <summary>Returns the component-wise | of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator |(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 | rhs.c0, lhs.c1 | rhs.c1, lhs.c2 | rhs.c2);

	/// <summary>Returns the component-wise ^ of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator ^(Int2x3 lhs, Int2x3 rhs) => new Int2x3(lhs.c0 ^ rhs.c0, lhs.c1 ^ rhs.c1, lhs.c2 ^ rhs.c2);

	/// <summary>Returns the component-wise << of matrix by scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator <<(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 << rhs, lhs.c1 << rhs, lhs.c2 << rhs);

	/// <summary>Returns the component-wise >> of matrix by scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator >>(Int2x3 lhs, int rhs) => new Int2x3(lhs.c0 >> rhs, lhs.c1 >> rhs, lhs.c2 >> rhs);

	/// <summary>Returns the component-wise bitwise NOT of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator ~(Int2x3 val) => new Int2x3(~val.c0, ~val.c1, ~val.c2);

	/// <summary>Returns the component-wise negation of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int2x3 operator -(Int2x3 val) => new Int2x3(-val.c0, -val.c1, -val.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator <(Int2x3 lhs, Int2x3 rhs) => new Bool2x3(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator <(Int2x3 lhs, int rhs) => new Bool2x3(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs);

	/// <summary>Returns a Bool2x3 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator <(int lhs, Int2x3 rhs) => new Bool2x3(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator <=(Int2x3 lhs, Int2x3 rhs) => new Bool2x3(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator <=(Int2x3 lhs, int rhs) => new Bool2x3(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs);

	/// <summary>Returns a Bool2x3 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator <=(int lhs, Int2x3 rhs) => new Bool2x3(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator >(Int2x3 lhs, Int2x3 rhs) => new Bool2x3(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator >(Int2x3 lhs, int rhs) => new Bool2x3(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs);

	/// <summary>Returns a Bool2x3 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator >(int lhs, Int2x3 rhs) => new Bool2x3(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator >=(Int2x3 lhs, Int2x3 rhs) => new Bool2x3(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator >=(Int2x3 lhs, int rhs) => new Bool2x3(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs);

	/// <summary>Returns a Bool2x3 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator >=(int lhs, Int2x3 rhs) => new Bool2x3(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator ==(Int2x3 lhs, Int2x3 rhs) => new Bool2x3(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator ==(Int2x3 lhs, int rhs) => new Bool2x3(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs);

	/// <summary>Returns a Bool2x3 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator ==(int lhs, Int2x3 rhs) => new Bool2x3(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator !=(Int2x3 lhs, Int2x3 rhs) => new Bool2x3(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2);

	/// <summary>Returns a Bool2x3 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator !=(Int2x3 lhs, int rhs) => new Bool2x3(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs);

	/// <summary>Returns a Bool2x3 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2x3 operator !=(int lhs, Int2x3 rhs) => new Bool2x3(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2);

	// --- Cross-Type Casting Operators ---
	/// <summary>Explicitly converts a Float2x3 to a Int2x3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int2x3(Float2x3 m)
	{
		return new Int2x3((Int2)m.c0, (Int2)m.c1, (Int2)m.c2);
	}

	/// <summary>Explicitly converts a Double2x3 to a Int2x3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int2x3(Double2x3 m)
	{
		return new Int2x3((Int2)m.c0, (Int2)m.c1, (Int2)m.c2);
	}

	/// <summary>Explicitly converts a UInt2x3 to a Int2x3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int2x3(UInt2x3 m)
	{
		return new Int2x3((Int2)m.c0, (Int2)m.c1, (Int2)m.c2);
	}

	// --- Matrix Methods ---
	/// <summary>Gets the transpose of this matrix.</summary>
	public Int3x2 Transpose
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Transpose(this);
	}

	/// <summary>Gets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int3 GetRow0()
	{
		return new Int3(c0.X, c1.X, c2.X);
	}

	/// <summary>Sets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow0(Int3 value)
	{
		c0.X = value.X;
		c1.X = value.Y;
		c2.X = value.Z;
	}

	/// <summary>Gets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int3 GetRow1()
	{
		return new Int3(c0.Y, c1.Y, c2.Y);
	}

	/// <summary>Sets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow1(Int3 value)
	{
		c0.Y = value.X;
		c1.Y = value.Y;
		c2.Y = value.Z;
	}

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public int[] ToArray()
	{
		int[] array = new int[6];
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 3; j++)
				array[i * 3 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Int2x3 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2); }

	public override bool Equals(object? o) { return o is Int2x3 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			hash = hash * 23 + c2.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("Int2x3(");
		sb.Append(this.c0.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Y.ToString(format, formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
