//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-04 01:00:58
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 3x4 matrix of ints.</summary>
[System.Serializable]
public partial struct Int3x4 : System.IEquatable<Int3x4>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public Int3 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public Int3 c1;
	/// <summary>Column 2 of the matrix.</summary>
	public Int3 c2;
	/// <summary>Column 3 of the matrix.</summary>
	public Int3 c3;

	/// <summary>Int3x4 zero value.</summary>
	public static readonly Int3x4 Zero = new Int3x4(Int3.Zero, Int3.Zero, Int3.Zero, Int3.Zero);

	/// <summary>Constructs a Int3x4 matrix from 4 Int3 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int3x4(Int3 col0, Int3 col1, Int3 col2, Int3 col3)
	{
		this.c0 = col0;
		this.c1 = col1;
		this.c2 = col2;
		this.c3 = col3;
	}

	/// <summary>Constructs a Int3x4 matrix from 12 int values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int3x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13, int m20, int m21, int m22, int m23)
	{
		this.c0 = new Int3(m00, m10, m20);
		this.c1 = new Int3(m01, m11, m21);
		this.c2 = new Int3(m02, m12, m22);
		this.c3 = new Int3(m03, m13, m23);
	}

	/// <summary>Constructs a Int3x4 matrix from a single int value by assigning it to every component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int3x4(int v)
	{
		this.c0 = new Int3(v);
		this.c1 = new Int3(v);
		this.c2 = new Int3(v);
		this.c3 = new Int3(v);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator +(Int3x4 lhs, Int3x4 rhs) { return new Int3x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator +(Int3x4 lhs, int rhs) { return new Int3x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator +(int lhs, Int3x4 rhs) { return new Int3x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator -(Int3x4 lhs, Int3x4 rhs) { return new Int3x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator -(Int3x4 lhs, int rhs) { return new Int3x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator -(int lhs, Int3x4 rhs) { return new Int3x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator /(Int3x4 lhs, Int3x4 rhs) { return new Int3x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator /(Int3x4 lhs, int rhs) { return new Int3x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator /(int lhs, Int3x4 rhs) { return new Int3x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator %(Int3x4 lhs, Int3x4 rhs) { return new Int3x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator %(Int3x4 lhs, int rhs) { return new Int3x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator %(int lhs, Int3x4 rhs) { return new Int3x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int3x4 operator -(Int3x4 val) { return new Int3x4(-val.c0, -val.c1, -val.c2, -val.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <(Int3x4 lhs, Int3x4 rhs) { return new Bool3x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <(Int3x4 lhs, int rhs) { return new Bool3x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <(int lhs, Int3x4 rhs) { return new Bool3x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <=(Int3x4 lhs, Int3x4 rhs) { return new Bool3x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <=(Int3x4 lhs, int rhs) { return new Bool3x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <=(int lhs, Int3x4 rhs) { return new Bool3x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >(Int3x4 lhs, Int3x4 rhs) { return new Bool3x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >(Int3x4 lhs, int rhs) { return new Bool3x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >(int lhs, Int3x4 rhs) { return new Bool3x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >=(Int3x4 lhs, Int3x4 rhs) { return new Bool3x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >=(Int3x4 lhs, int rhs) { return new Bool3x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >=(int lhs, Int3x4 rhs) { return new Bool3x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator ==(Int3x4 lhs, Int3x4 rhs) { return new Bool3x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator ==(Int3x4 lhs, int rhs) { return new Bool3x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator ==(int lhs, Int3x4 rhs) { return new Bool3x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator !=(Int3x4 lhs, Int3x4 rhs) { return new Bool3x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator !=(Int3x4 lhs, int rhs) { return new Bool3x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs); }
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator !=(int lhs, Int3x4 rhs) { return new Bool3x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3); }

	/// <summary>Returns a reference to the Int3 (column) at a specified index.</summary>
	unsafe public ref Int3 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

			fixed (Int3* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public int this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public int[] ToArray()
	{
		int[] array = new int[12];
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 4; j++)
				array[i * 4 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Int3x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

	public override bool Equals(object? o) { return o is Int3x4 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			hash = hash * 23 + c2.GetHashCode();
			hash = hash * 23 + c3.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("Int3x4(");
		sb.Append(this.c0.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Z.ToString(format, formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
