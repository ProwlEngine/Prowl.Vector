//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-14 01:23:10
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{
    /// <summary>A 4x4 matrix of ints.</summary>
    [System.Serializable]
    public partial struct Int4x4 : System.IEquatable<Int4x4>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public Int4 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public Int4 c1;
        /// <summary>Column 2 of the matrix.</summary>
        public Int4 c2;
        /// <summary>Column 3 of the matrix.</summary>
        public Int4 c3;

        /// <summary>Int4x4 identity transform.</summary>
        public static readonly Int4x4 Identity = new Int4x4(new Int4(1, 0, 0, 0), new Int4(0, 1, 0, 0), new Int4(0, 0, 1, 0), new Int4(0, 0, 0, 1));

        /// <summary>Int4x4 zero value.</summary>
        public static readonly Int4x4 Zero = new Int4x4(Int4.Zero, Int4.Zero, Int4.Zero, Int4.Zero);

        /// <summary>Constructs a Int4x4 matrix from 4 Int4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int4x4(Int4 col0, Int4 col1, Int4 col2, Int4 col3)
        {
            this.c0 = col0;
            this.c1 = col1;
            this.c2 = col2;
            this.c3 = col3;
        }

        /// <summary>Constructs a Int4x4 matrix from 16 int values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int4x4(int m00, int m01, int m02, int m03, int m10, int m11, int m12, int m13, int m20, int m21, int m22, int m23, int m30, int m31, int m32, int m33)
        {
            this.c0 = new Int4(m00, m10, m20, m30);
            this.c1 = new Int4(m01, m11, m21, m31);
            this.c2 = new Int4(m02, m12, m22, m32);
            this.c3 = new Int4(m03, m13, m23, m33);
        }

        /// <summary>Constructs a Int4x4 matrix from a single int value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int4x4(int v)
        {
            this.c0 = new Int4(v);
            this.c1 = new Int4(v);
            this.c2 = new Int4(v);
            this.c3 = new Int4(v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator +(Int4x4 lhs, Int4x4 rhs) { return new Int4x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator +(Int4x4 lhs, int rhs) { return new Int4x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator +(int lhs, Int4x4 rhs) { return new Int4x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator -(Int4x4 lhs, Int4x4 rhs) { return new Int4x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator -(Int4x4 lhs, int rhs) { return new Int4x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator -(int lhs, Int4x4 rhs) { return new Int4x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator /(Int4x4 lhs, Int4x4 rhs) { return new Int4x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator /(Int4x4 lhs, int rhs) { return new Int4x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator /(int lhs, Int4x4 rhs) { return new Int4x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator %(Int4x4 lhs, Int4x4 rhs) { return new Int4x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator %(Int4x4 lhs, int rhs) { return new Int4x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator %(int lhs, Int4x4 rhs) { return new Int4x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator -(Int4x4 val) { return new Int4x4(-val.c0, -val.c1, -val.c2, -val.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <(Int4x4 lhs, Int4x4 rhs) { return new Bool4x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <(Int4x4 lhs, int rhs) { return new Bool4x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <(int lhs, Int4x4 rhs) { return new Bool4x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <=(Int4x4 lhs, Int4x4 rhs) { return new Bool4x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <=(Int4x4 lhs, int rhs) { return new Bool4x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <=(int lhs, Int4x4 rhs) { return new Bool4x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >(Int4x4 lhs, Int4x4 rhs) { return new Bool4x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >(Int4x4 lhs, int rhs) { return new Bool4x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >(int lhs, Int4x4 rhs) { return new Bool4x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >=(Int4x4 lhs, Int4x4 rhs) { return new Bool4x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >=(Int4x4 lhs, int rhs) { return new Bool4x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >=(int lhs, Int4x4 rhs) { return new Bool4x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator ==(Int4x4 lhs, Int4x4 rhs) { return new Bool4x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator ==(Int4x4 lhs, int rhs) { return new Bool4x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator ==(int lhs, Int4x4 rhs) { return new Bool4x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator !=(Int4x4 lhs, Int4x4 rhs) { return new Bool4x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator !=(Int4x4 lhs, int rhs) { return new Bool4x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator !=(int lhs, Int4x4 rhs) { return new Bool4x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3); }

        /// <summary>Returns the product of two Int4x4 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Int4x4 operator *(Int4x4 lhs, Int4x4 rhs)
        {
            return new Int4x4(
                new Int4((lhs.c0.X * rhs.c0.X + lhs.c1.X * rhs.c0.Y + lhs.c2.X * rhs.c0.Z + lhs.c3.X * rhs.c0.W), (lhs.c0.Y * rhs.c0.X + lhs.c1.Y * rhs.c0.Y + lhs.c2.Y * rhs.c0.Z + lhs.c3.Y * rhs.c0.W), (lhs.c0.Z * rhs.c0.X + lhs.c1.Z * rhs.c0.Y + lhs.c2.Z * rhs.c0.Z + lhs.c3.Z * rhs.c0.W), (lhs.c0.W * rhs.c0.X + lhs.c1.W * rhs.c0.Y + lhs.c2.W * rhs.c0.Z + lhs.c3.W * rhs.c0.W)),
                new Int4((lhs.c0.X * rhs.c1.X + lhs.c1.X * rhs.c1.Y + lhs.c2.X * rhs.c1.Z + lhs.c3.X * rhs.c1.W), (lhs.c0.Y * rhs.c1.X + lhs.c1.Y * rhs.c1.Y + lhs.c2.Y * rhs.c1.Z + lhs.c3.Y * rhs.c1.W), (lhs.c0.Z * rhs.c1.X + lhs.c1.Z * rhs.c1.Y + lhs.c2.Z * rhs.c1.Z + lhs.c3.Z * rhs.c1.W), (lhs.c0.W * rhs.c1.X + lhs.c1.W * rhs.c1.Y + lhs.c2.W * rhs.c1.Z + lhs.c3.W * rhs.c1.W)),
                new Int4((lhs.c0.X * rhs.c2.X + lhs.c1.X * rhs.c2.Y + lhs.c2.X * rhs.c2.Z + lhs.c3.X * rhs.c2.W), (lhs.c0.Y * rhs.c2.X + lhs.c1.Y * rhs.c2.Y + lhs.c2.Y * rhs.c2.Z + lhs.c3.Y * rhs.c2.W), (lhs.c0.Z * rhs.c2.X + lhs.c1.Z * rhs.c2.Y + lhs.c2.Z * rhs.c2.Z + lhs.c3.Z * rhs.c2.W), (lhs.c0.W * rhs.c2.X + lhs.c1.W * rhs.c2.Y + lhs.c2.W * rhs.c2.Z + lhs.c3.W * rhs.c2.W)),
                new Int4((lhs.c0.X * rhs.c3.X + lhs.c1.X * rhs.c3.Y + lhs.c2.X * rhs.c3.Z + lhs.c3.X * rhs.c3.W), (lhs.c0.Y * rhs.c3.X + lhs.c1.Y * rhs.c3.Y + lhs.c2.Y * rhs.c3.Z + lhs.c3.Y * rhs.c3.W), (lhs.c0.Z * rhs.c3.X + lhs.c1.Z * rhs.c3.Y + lhs.c2.Z * rhs.c3.Z + lhs.c3.Z * rhs.c3.W), (lhs.c0.W * rhs.c3.X + lhs.c1.W * rhs.c3.Y + lhs.c2.W * rhs.c3.Z + lhs.c3.W * rhs.c3.W))
            );
        }

        /// <summary>Returns a reference to the Int4 (column) at a specified index.</summary>
        unsafe public ref Int4 this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)index >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

                fixed (Int4* pC0 = &this.c0)
                {
                    return ref pC0[index];
                }
            }
        }

        /// <summary>Returns the element at row and column indices.</summary>
        public int this[int row, int column]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)column >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(column));
                return this[column][row];
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                if ((uint)column >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(column));
                var temp = this[column];
                temp[row] = value;
                this[column] = temp;
            }
        }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Int4x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

        public override bool Equals(object o) { return o is Int4x4 converted && Equals(converted); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = 17;
                hash = hash * 23 + c0.GetHashCode();
                hash = hash * 23 + c1.GetHashCode();
                hash = hash * 23 + c2.GetHashCode();
                hash = hash * 23 + c3.GetHashCode();
                return hash;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("Int4x4(");
            sb.Append(this.c0.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.W.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.W.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.W.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.W.ToString(format, formatProvider));
            sb.Append(")");
            return sb.ToString();
        }

    }
}
