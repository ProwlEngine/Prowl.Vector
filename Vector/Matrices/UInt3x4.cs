//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-10-10 14:13:41
//

using System; 
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{

/// <summary>A 3x4 matrix of uints.</summary>
[System.Serializable]
public partial struct UInt3x4 : System.IEquatable<UInt3x4>, IFormattable
{
	/// <summary>Column 0 of the matrix.</summary>
	public UInt3 c0;
	/// <summary>Column 1 of the matrix.</summary>
	public UInt3 c1;
	/// <summary>Column 2 of the matrix.</summary>
	public UInt3 c2;
	/// <summary>Column 3 of the matrix.</summary>
	public UInt3 c3;

	/// <summary>UInt3x4 zero value.</summary>
	public static readonly UInt3x4 Zero = new UInt3x4(UInt3.Zero, UInt3.Zero, UInt3.Zero, UInt3.Zero);

	/// <summary>Constructs a UInt3x4 matrix from 4 UInt3 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3x4(UInt3 col0, UInt3 col1, UInt3 col2, UInt3 col3)
	{
		this.c0 = col0;
		this.c1 = col1;
		this.c2 = col2;
		this.c3 = col3;
	}

	/// <summary>Constructs a UInt3x4 matrix from 12 uint values given in row-major order.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13, uint m20, uint m21, uint m22, uint m23)
	{
		this.c0 = new UInt3(m00, m10, m20);
		this.c1 = new UInt3(m01, m11, m21);
		this.c2 = new UInt3(m02, m12, m22);
		this.c3 = new UInt3(m03, m13, m23);
	}

	/// <summary>Constructs a UInt3x4 matrix from a single uint value by assigning it to every component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3x4(uint v)
	{
		this.c0 = new UInt3(v);
		this.c1 = new UInt3(v);
		this.c2 = new UInt3(v);
		this.c3 = new UInt3(v);
	}

	/// <summary>Constructs a UInt3x4 from a Float3x4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3x4(Float3x4 m)
	{
		this.c0 = new UInt3(m.c0);
		this.c1 = new UInt3(m.c1);
		this.c2 = new UInt3(m.c2);
		this.c3 = new UInt3(m.c3);
	}

	/// <summary>Constructs a UInt3x4 from a Double3x4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3x4(Double3x4 m)
	{
		this.c0 = new UInt3(m.c0);
		this.c1 = new UInt3(m.c1);
		this.c2 = new UInt3(m.c2);
		this.c3 = new UInt3(m.c3);
	}

	/// <summary>Constructs a UInt3x4 from a Int3x4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3x4(Int3x4 m)
	{
		this.c0 = new UInt3(m.c0);
		this.c1 = new UInt3(m.c1);
		this.c2 = new UInt3(m.c2);
		this.c3 = new UInt3(m.c3);
	}

	/// <summary>Returns a reference to the UInt3 (column) at a specified index.</summary>
	unsafe public ref UInt3 this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)index >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

			fixed (UInt3* pC0 = &this.c0)
			{
				return ref pC0[index];
			}
		}
	}

	/// <summary>Returns the element at row and column indices.</summary>
	public uint this[int row, int column]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			return this[column][row];
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			if ((uint)column >= 4)
				throw new System.ArgumentOutOfRangeException(nameof(column));
			var temp = this[column];
			temp[row] = value;
			this[column] = temp;
		}
	}
	// --- Component-wise Operators ---
	/// <summary>Returns the component-wise + of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator +(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3);

	/// <summary>Returns the component-wise + of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator +(UInt3x4 lhs, uint rhs) => new UInt3x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs);

	/// <summary>Returns the component-wise + of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator +(uint lhs, UInt3x4 rhs) => new UInt3x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3);

	/// <summary>Returns the component-wise - of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator -(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3);

	/// <summary>Returns the component-wise - of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator -(UInt3x4 lhs, uint rhs) => new UInt3x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs);

	/// <summary>Returns the component-wise - of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator -(uint lhs, UInt3x4 rhs) => new UInt3x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3);

	/// <summary>Returns the component-wise * of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator *(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2, lhs.c3 * rhs.c3);

	/// <summary>Returns the component-wise * of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator *(UInt3x4 lhs, uint rhs) => new UInt3x4(lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs, lhs.c3 * rhs);

	/// <summary>Returns the component-wise * of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator *(uint lhs, UInt3x4 rhs) => new UInt3x4(lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2, lhs * rhs.c3);

	/// <summary>Returns the component-wise / of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator /(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3);

	/// <summary>Returns the component-wise / of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator /(UInt3x4 lhs, uint rhs) => new UInt3x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs);

	/// <summary>Returns the component-wise / of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator /(uint lhs, UInt3x4 rhs) => new UInt3x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3);

	/// <summary>Returns the component-wise % of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator %(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3);

	/// <summary>Returns the component-wise % of matrix and scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator %(UInt3x4 lhs, uint rhs) => new UInt3x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs);

	/// <summary>Returns the component-wise % of scalar and matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator %(uint lhs, UInt3x4 rhs) => new UInt3x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3);

	/// <summary>Returns the component-wise & of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator &(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 & rhs.c0, lhs.c1 & rhs.c1, lhs.c2 & rhs.c2, lhs.c3 & rhs.c3);

	/// <summary>Returns the component-wise | of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator |(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 | rhs.c0, lhs.c1 | rhs.c1, lhs.c2 | rhs.c2, lhs.c3 | rhs.c3);

	/// <summary>Returns the component-wise ^ of two matrices.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator ^(UInt3x4 lhs, UInt3x4 rhs) => new UInt3x4(lhs.c0 ^ rhs.c0, lhs.c1 ^ rhs.c1, lhs.c2 ^ rhs.c2, lhs.c3 ^ rhs.c3);

	/// <summary>Returns the component-wise << of matrix by scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator <<(UInt3x4 lhs, int rhs) => new UInt3x4(lhs.c0 << rhs, lhs.c1 << rhs, lhs.c2 << rhs, lhs.c3 << rhs);

	/// <summary>Returns the component-wise >> of matrix by scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator >>(UInt3x4 lhs, int rhs) => new UInt3x4(lhs.c0 >> rhs, lhs.c1 >> rhs, lhs.c2 >> rhs, lhs.c3 >> rhs);

	/// <summary>Returns the component-wise bitwise NOT of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3x4 operator ~(UInt3x4 val) => new UInt3x4(~val.c0, ~val.c1, ~val.c2, ~val.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <(UInt3x4 lhs, UInt3x4 rhs) => new Bool3x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <(UInt3x4 lhs, uint rhs) => new Bool3x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs);

	/// <summary>Returns a Bool3x4 indicating component-wise < comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <(uint lhs, UInt3x4 rhs) => new Bool3x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <=(UInt3x4 lhs, UInt3x4 rhs) => new Bool3x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <=(UInt3x4 lhs, uint rhs) => new Bool3x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs);

	/// <summary>Returns a Bool3x4 indicating component-wise <= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator <=(uint lhs, UInt3x4 rhs) => new Bool3x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >(UInt3x4 lhs, UInt3x4 rhs) => new Bool3x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >(UInt3x4 lhs, uint rhs) => new Bool3x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs);

	/// <summary>Returns a Bool3x4 indicating component-wise > comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >(uint lhs, UInt3x4 rhs) => new Bool3x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >=(UInt3x4 lhs, UInt3x4 rhs) => new Bool3x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >=(UInt3x4 lhs, uint rhs) => new Bool3x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs);

	/// <summary>Returns a Bool3x4 indicating component-wise >= comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator >=(uint lhs, UInt3x4 rhs) => new Bool3x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator ==(UInt3x4 lhs, UInt3x4 rhs) => new Bool3x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator ==(UInt3x4 lhs, uint rhs) => new Bool3x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs);

	/// <summary>Returns a Bool3x4 indicating component-wise == comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator ==(uint lhs, UInt3x4 rhs) => new Bool3x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator !=(UInt3x4 lhs, UInt3x4 rhs) => new Bool3x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3);

	/// <summary>Returns a Bool3x4 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator !=(UInt3x4 lhs, uint rhs) => new Bool3x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs);

	/// <summary>Returns a Bool3x4 indicating component-wise != comparison with scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3x4 operator !=(uint lhs, UInt3x4 rhs) => new Bool3x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3);

	// --- Cross-Type Casting Operators ---
	/// <summary>Explicitly converts a Float3x4 to a UInt3x4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3x4(Float3x4 m)
	{
		return new UInt3x4((UInt3)m.c0, (UInt3)m.c1, (UInt3)m.c2, (UInt3)m.c3);
	}

	/// <summary>Explicitly converts a Double3x4 to a UInt3x4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3x4(Double3x4 m)
	{
		return new UInt3x4((UInt3)m.c0, (UInt3)m.c1, (UInt3)m.c2, (UInt3)m.c3);
	}

	/// <summary>Explicitly converts a Int3x4 to a UInt3x4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3x4(Int3x4 m)
	{
		return new UInt3x4((UInt3)m.c0, (UInt3)m.c1, (UInt3)m.c2, (UInt3)m.c3);
	}

	// --- Matrix Methods ---
	/// <summary>Gets the transpose of this matrix.</summary>
	public UInt4x3 Transpose
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Maths.Transpose(this);
	}

	/// <summary>Gets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt4 GetRow0()
	{
		return new UInt4(c0.X, c1.X, c2.X, c3.X);
	}

	/// <summary>Sets row 0 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow0(UInt4 value)
	{
		c0.X = value.X;
		c1.X = value.Y;
		c2.X = value.Z;
		c3.X = value.W;
	}

	/// <summary>Gets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt4 GetRow1()
	{
		return new UInt4(c0.Y, c1.Y, c2.Y, c3.Y);
	}

	/// <summary>Sets row 1 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow1(UInt4 value)
	{
		c0.Y = value.X;
		c1.Y = value.Y;
		c2.Y = value.Z;
		c3.Y = value.W;
	}

	/// <summary>Gets row 2 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt4 GetRow2()
	{
		return new UInt4(c0.Z, c1.Z, c2.Z, c3.Z);
	}

	/// <summary>Sets row 2 of the matrix.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void SetRow2(UInt4 value)
	{
		c0.Z = value.X;
		c1.Z = value.Y;
		c2.Z = value.Z;
		c3.Z = value.W;
	}

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint[] ToArray()
	{
		uint[] array = new uint[12];
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 4; j++)
				array[i * 4 + j] = this[i, j];
		return array;
	}
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(UInt3x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

	public override bool Equals(object? o) { return o is UInt3x4 converted && Equals(converted); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override int GetHashCode()
	{
		unchecked // Overflow is fine, just wrap
		{
			int hash = 17;
			hash = hash * 23 + c0.GetHashCode();
			hash = hash * 23 + c1.GetHashCode();
			hash = hash * 23 + c2.GetHashCode();
			hash = hash * 23 + c3.GetHashCode();
			return hash;
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public string ToString(string format, IFormatProvider formatProvider)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append("UInt3x4(");
		sb.Append(this.c0.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.X.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Y.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append("  ");
		sb.Append(this.c0.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c1.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c2.Z.ToString(format, formatProvider));
		sb.Append(", ");
		sb.Append(this.c3.Z.ToString(format, formatProvider));
		sb.Append(")");
		return sb.ToString();
	}

}
}
