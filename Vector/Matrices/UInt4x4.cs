//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-13 23:34:11
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using Prowl.Vector;

namespace Prowl.Vector
{
    /// <summary>A 4x4 matrix of uints.</summary>
    [System.Serializable]
    public partial struct UInt4x4 : System.IEquatable<UInt4x4>, IFormattable
    {
        /// <summary>Column 0 of the matrix.</summary>
        public UInt4 c0;
        /// <summary>Column 1 of the matrix.</summary>
        public UInt4 c1;
        /// <summary>Column 2 of the matrix.</summary>
        public UInt4 c2;
        /// <summary>Column 3 of the matrix.</summary>
        public UInt4 c3;

        /// <summary>UInt4x4 identity transform.</summary>
        public static readonly UInt4x4 Identity = new UInt4x4(new UInt4(1u, 0u, 0u, 0u), new UInt4(0u, 1u, 0u, 0u), new UInt4(0u, 0u, 1u, 0u), new UInt4(0u, 0u, 0u, 1u));

        /// <summary>UInt4x4 zero value.</summary>
        public static readonly UInt4x4 Zero = new UInt4x4(UInt4.Zero, UInt4.Zero, UInt4.Zero, UInt4.Zero);

        /// <summary>Constructs a UInt4x4 matrix from 4 UInt4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UInt4x4(UInt4 col0, UInt4 col1, UInt4 col2, UInt4 col3)
        {
            this.c0 = col0;
            this.c1 = col1;
            this.c2 = col2;
            this.c3 = col3;
        }

        /// <summary>Constructs a UInt4x4 matrix from 16 uint values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UInt4x4(uint m00, uint m01, uint m02, uint m03, uint m10, uint m11, uint m12, uint m13, uint m20, uint m21, uint m22, uint m23, uint m30, uint m31, uint m32, uint m33)
        {
            this.c0 = new UInt4(m00, m10, m20, m30);
            this.c1 = new UInt4(m01, m11, m21, m31);
            this.c2 = new UInt4(m02, m12, m22, m32);
            this.c3 = new UInt4(m03, m13, m23, m33);
        }

        /// <summary>Constructs a UInt4x4 matrix from a single uint value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UInt4x4(uint v)
        {
            this.c0 = new UInt4(v);
            this.c1 = new UInt4(v);
            this.c2 = new UInt4(v);
            this.c3 = new UInt4(v);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator +(UInt4x4 lhs, UInt4x4 rhs) { return new UInt4x4(lhs.c0 + rhs.c0, lhs.c1 + rhs.c1, lhs.c2 + rhs.c2, lhs.c3 + rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator +(UInt4x4 lhs, uint rhs) { return new UInt4x4(lhs.c0 + rhs, lhs.c1 + rhs, lhs.c2 + rhs, lhs.c3 + rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator +(uint lhs, UInt4x4 rhs) { return new UInt4x4(lhs + rhs.c0, lhs + rhs.c1, lhs + rhs.c2, lhs + rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator -(UInt4x4 lhs, UInt4x4 rhs) { return new UInt4x4(lhs.c0 - rhs.c0, lhs.c1 - rhs.c1, lhs.c2 - rhs.c2, lhs.c3 - rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator -(UInt4x4 lhs, uint rhs) { return new UInt4x4(lhs.c0 - rhs, lhs.c1 - rhs, lhs.c2 - rhs, lhs.c3 - rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator -(uint lhs, UInt4x4 rhs) { return new UInt4x4(lhs - rhs.c0, lhs - rhs.c1, lhs - rhs.c2, lhs - rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator *(UInt4x4 lhs, UInt4x4 rhs) { return new UInt4x4(lhs.c0 * rhs.c0, lhs.c1 * rhs.c1, lhs.c2 * rhs.c2, lhs.c3 * rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator *(UInt4x4 lhs, uint rhs) { return new UInt4x4(lhs.c0 * rhs, lhs.c1 * rhs, lhs.c2 * rhs, lhs.c3 * rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator *(uint lhs, UInt4x4 rhs) { return new UInt4x4(lhs * rhs.c0, lhs * rhs.c1, lhs * rhs.c2, lhs * rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator /(UInt4x4 lhs, UInt4x4 rhs) { return new UInt4x4(lhs.c0 / rhs.c0, lhs.c1 / rhs.c1, lhs.c2 / rhs.c2, lhs.c3 / rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator /(UInt4x4 lhs, uint rhs) { return new UInt4x4(lhs.c0 / rhs, lhs.c1 / rhs, lhs.c2 / rhs, lhs.c3 / rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator /(uint lhs, UInt4x4 rhs) { return new UInt4x4(lhs / rhs.c0, lhs / rhs.c1, lhs / rhs.c2, lhs / rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator %(UInt4x4 lhs, UInt4x4 rhs) { return new UInt4x4(lhs.c0 % rhs.c0, lhs.c1 % rhs.c1, lhs.c2 % rhs.c2, lhs.c3 % rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator %(UInt4x4 lhs, uint rhs) { return new UInt4x4(lhs.c0 % rhs, lhs.c1 % rhs, lhs.c2 % rhs, lhs.c3 % rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UInt4x4 operator %(uint lhs, UInt4x4 rhs) { return new UInt4x4(lhs % rhs.c0, lhs % rhs.c1, lhs % rhs.c2, lhs % rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <(UInt4x4 lhs, UInt4x4 rhs) { return new Bool4x4(lhs.c0 < rhs.c0, lhs.c1 < rhs.c1, lhs.c2 < rhs.c2, lhs.c3 < rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <(UInt4x4 lhs, uint rhs) { return new Bool4x4(lhs.c0 < rhs, lhs.c1 < rhs, lhs.c2 < rhs, lhs.c3 < rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <(uint lhs, UInt4x4 rhs) { return new Bool4x4(lhs < rhs.c0, lhs < rhs.c1, lhs < rhs.c2, lhs < rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <=(UInt4x4 lhs, UInt4x4 rhs) { return new Bool4x4(lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1, lhs.c2 <= rhs.c2, lhs.c3 <= rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <=(UInt4x4 lhs, uint rhs) { return new Bool4x4(lhs.c0 <= rhs, lhs.c1 <= rhs, lhs.c2 <= rhs, lhs.c3 <= rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator <=(uint lhs, UInt4x4 rhs) { return new Bool4x4(lhs <= rhs.c0, lhs <= rhs.c1, lhs <= rhs.c2, lhs <= rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >(UInt4x4 lhs, UInt4x4 rhs) { return new Bool4x4(lhs.c0 > rhs.c0, lhs.c1 > rhs.c1, lhs.c2 > rhs.c2, lhs.c3 > rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >(UInt4x4 lhs, uint rhs) { return new Bool4x4(lhs.c0 > rhs, lhs.c1 > rhs, lhs.c2 > rhs, lhs.c3 > rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >(uint lhs, UInt4x4 rhs) { return new Bool4x4(lhs > rhs.c0, lhs > rhs.c1, lhs > rhs.c2, lhs > rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >=(UInt4x4 lhs, UInt4x4 rhs) { return new Bool4x4(lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1, lhs.c2 >= rhs.c2, lhs.c3 >= rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >=(UInt4x4 lhs, uint rhs) { return new Bool4x4(lhs.c0 >= rhs, lhs.c1 >= rhs, lhs.c2 >= rhs, lhs.c3 >= rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator >=(uint lhs, UInt4x4 rhs) { return new Bool4x4(lhs >= rhs.c0, lhs >= rhs.c1, lhs >= rhs.c2, lhs >= rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator ==(UInt4x4 lhs, UInt4x4 rhs) { return new Bool4x4(lhs.c0 == rhs.c0, lhs.c1 == rhs.c1, lhs.c2 == rhs.c2, lhs.c3 == rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator ==(UInt4x4 lhs, uint rhs) { return new Bool4x4(lhs.c0 == rhs, lhs.c1 == rhs, lhs.c2 == rhs, lhs.c3 == rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator ==(uint lhs, UInt4x4 rhs) { return new Bool4x4(lhs == rhs.c0, lhs == rhs.c1, lhs == rhs.c2, lhs == rhs.c3); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator !=(UInt4x4 lhs, UInt4x4 rhs) { return new Bool4x4(lhs.c0 != rhs.c0, lhs.c1 != rhs.c1, lhs.c2 != rhs.c2, lhs.c3 != rhs.c3); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator !=(UInt4x4 lhs, uint rhs) { return new Bool4x4(lhs.c0 != rhs, lhs.c1 != rhs, lhs.c2 != rhs, lhs.c3 != rhs); }
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4x4 operator !=(uint lhs, UInt4x4 rhs) { return new Bool4x4(lhs != rhs.c0, lhs != rhs.c1, lhs != rhs.c2, lhs != rhs.c3); }

        /// <summary>Returns a reference to the UInt4 (column) at a specified index.</summary>
        unsafe public ref UInt4 this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                if ((uint)index >= 4)
                    throw new System.ArgumentOutOfRangeException(nameof(index), $"Column index must be between 0 and 3, but was {index}.");

                fixed (UInt4* pC0 = &this.c0)
                {
                    return ref pC0[index];
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(UInt4x4 rhs) { return this.c0.Equals(rhs.c0) && this.c1.Equals(rhs.c1) && this.c2.Equals(rhs.c2) && this.c3.Equals(rhs.c3); }

        public override bool Equals(object o) { return o is UInt4x4 converted && Equals(converted); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hash = 17;
                hash = hash * 23 + c0.GetHashCode();
                hash = hash * 23 + c1.GetHashCode();
                hash = hash * 23 + c2.GetHashCode();
                hash = hash * 23 + c3.GetHashCode();
                return hash;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString() { return ToString(null, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("UInt4x4(");
            sb.Append(this.c0.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.X.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.Y.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.Z.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append("  ");
            sb.Append(this.c0.W.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c1.W.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c2.W.ToString(format, formatProvider));
            sb.Append(", ");
            sb.Append(this.c3.W.ToString(format, formatProvider));
            sb.Append(")");
            return sb.ToString();
        }

    }
}
