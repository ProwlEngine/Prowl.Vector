//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-13 20:47:09
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{
    /// <summary>
    /// Represents a 3-component vector using bool precision.
    /// </summary>
    [System.Serializable]
    public partial struct Bool3 : IEquatable<Bool3>, IFormattable
    {
        public bool X, Y, Z;

        // --- Constructors ---
        /// <summary>Initializes all components to a single scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(bool scalar) : this(scalar, scalar, scalar) { }

        /// <summary>Initializes with specified component values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(bool x, bool y, bool z)
        {
            X = x;
            Y = y;
            Z = z;
        }

        /// <summary>Initializes by copying components from another Bool3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(Bool3 v) : this(v.X, v.Y, v.Z) { }

        /// <summary>Initializes from an array.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(bool[] array)
        {
            if (array == null) throw new ArgumentNullException(nameof(array));
            if (array.Length < 3) throw new ArgumentException("Array must contain at least 3 elements.", nameof(array));
            X = array[0];
            Y = array[1];
            Z = array[2];
        }

        /// <summary>Initializes from a Bool2 and Z component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(Bool2 xy, bool z) : this(xy.X, xy.Y, z) { }

        /// <summary>Initializes from X component and a Bool2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(bool x, Bool2 yz) : this(x, yz.X, yz.Y) { }

        // --- Collection Constructors ---
        /// <summary>Initializes from an IEnumerable collection.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(IEnumerable<bool> values)
        {
            var array = values.ToArray();
            if (array.Length < 3) throw new ArgumentException("Collection must contain at least 3 elements.", nameof(values));
            X = array[0];
            Y = array[1];
            Z = array[2];
        }

        /// <summary>Initializes from a ReadOnlySpan.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(ReadOnlySpan<bool> span)
        {
            if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
            X = span[0];
            Y = span[1];
            Z = span[2];
        }

        /// <summary>Initializes from a Span.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3(Span<bool> span)
        {
            if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
            X = span[0];
            Y = span[1];
            Z = span[2];
        }

        // --- Static Properties ---
        /// <summary>Gets the zero vector.</summary>
        public static Bool3 Zero { get { return new Bool3(false, false, false); } }
        /// <summary>Gets the one vector.</summary>
        public static Bool3 One { get { return new Bool3(true, true, true); } }
        /// <summary>Gets the unit vector along the X-axis.</summary>
        public static Bool3 UnitX { get { return new Bool3(true, false, false); } }
        /// <summary>Gets the unit vector along the Y-axis.</summary>
        public static Bool3 UnitY { get { return new Bool3(false, true, false); } }
        /// <summary>Gets the unit vector along the Z-axis.</summary>
        public static Bool3 UnitZ { get { return new Bool3(false, false, true); } }

        // --- Indexer ---
        /// <summary>Gets or sets the component at the specified index.</summary>
        public bool this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                switch (index)
                {
                    case 0: return X;
                    case 1: return Y;
                    case 2: return Z;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
                }
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                switch (index)
                {
                    case 0: X = value; break;
                    case 1: Y = value; break;
                    case 2: Z = value; break;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
                }
            }
        }

        // --- Vector-to-Vector Operators ---
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator &(Bool3 a, Bool3 b) { return new Bool3(a.X && b.X, a.Y && b.Y, a.Z && b.Z); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator |(Bool3 a, Bool3 b) { return new Bool3(a.X || b.X, a.Y || b.Y, a.Z || b.Z); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator ^(Bool3 a, Bool3 b) { return new Bool3(a.X ^ b.X, a.Y ^ b.Y, a.Z ^ b.Z); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator !(Bool3 v) { return new Bool3(!v.X, !v.Y, !v.Z); }

        // --- Methods ---
        /// <summary>Returns true if any component is true.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Any() { return X || Y || Z; }

        /// <summary>Returns true if all components are true.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool All() { return X && Y && Z; }

        /// <summary>Returns true if all components are false.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool None() { return !X && !Y && !Z; }

        /// <summary>Returns an array of components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool[] ToArray() { return new bool[] { X, Y, Z }; }
        /// <summary>Returns an array of components.</summary>
        public override bool Equals(object obj) { return obj is Bool3 && Equals((Bool3)obj); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Bool3 other) { return X == other.X && Y == other.Y && Z == other.Z; }

        public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2); }

        public override string ToString()
        {
            return ToString(CultureInfo.CurrentCulture);
        }

        public string ToString(IFormatProvider formatProvider)
        {
            string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
            return "(" + X.ToString() + separator + Y.ToString() + separator + Z.ToString() + ")";
        }

        public string ToString(string format) { return ToString(CultureInfo.CurrentCulture); }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            // Format is ignored for boolean vectors
            return ToString(formatProvider);
        }
    }
}
