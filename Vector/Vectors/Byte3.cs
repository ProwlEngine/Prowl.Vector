//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-14 10:54:52
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{
    /// <summary>
    /// Represents a 3-component vector using byte precision.
    /// </summary>
    [System.Serializable]
    public partial struct Byte3 : IEquatable<Byte3>, IFormattable
    {
        public byte X, Y, Z;

        // --- Constructors ---
        /// <summary>Initializes all components to a single scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(byte scalar) : this(scalar, scalar, scalar) { }

        /// <summary>Initializes with specified component values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(byte x, byte y, byte z)
        {
            X = x;
            Y = y;
            Z = z;
        }

        /// <summary>Initializes by copying components from another Byte3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(Byte3 v) : this(v.X, v.Y, v.Z) { }

        /// <summary>Initializes from an array.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(byte[] array)
        {
            if (array == null) throw new ArgumentNullException(nameof(array));
            if (array.Length < 3) throw new ArgumentException("Array must contain at least 3 elements.", nameof(array));
            X = array[0];
            Y = array[1];
            Z = array[2];
        }

        /// <summary>Initializes from a Byte2 and Z component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(Byte2 xy, byte z) : this(xy.X, xy.Y, z) { }

        /// <summary>Initializes from X component and a Byte2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(byte x, Byte2 yz) : this(x, yz.X, yz.Y) { }

        // --- Type Conversion Constructors ---
        /// <summary>Initializes from a Float3 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(Float3 v) : this((byte)v.X, (byte)v.Y, (byte)v.Z) { }

        /// <summary>Initializes from a Double3 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(Double3 v) : this((byte)v.X, (byte)v.Y, (byte)v.Z) { }

        /// <summary>Initializes from a Int3 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(Int3 v) : this((byte)v.X, (byte)v.Y, (byte)v.Z) { }

        /// <summary>Initializes from a UShort3 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(UShort3 v) : this((byte)v.X, (byte)v.Y, (byte)v.Z) { }

        /// <summary>Initializes from a UInt3 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(UInt3 v) : this((byte)v.X, (byte)v.Y, (byte)v.Z) { }

        /// <summary>Initializes from a ULong3 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(ULong3 v) : this((byte)v.X, (byte)v.Y, (byte)v.Z) { }

        // --- Collection Constructors ---
        /// <summary>Initializes from an IEnumerable collection.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(IEnumerable<byte> values)
        {
            var array = values.ToArray();
            if (array.Length < 3) throw new ArgumentException("Collection must contain at least 3 elements.", nameof(values));
            X = array[0];
            Y = array[1];
            Z = array[2];
        }

        /// <summary>Initializes from a ReadOnlySpan.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(ReadOnlySpan<byte> span)
        {
            if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
            X = span[0];
            Y = span[1];
            Z = span[2];
        }

        /// <summary>Initializes from a Span.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte3(Span<byte> span)
        {
            if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
            X = span[0];
            Y = span[1];
            Z = span[2];
        }

        // --- Static Properties ---
        /// <summary>Gets the zero vector.</summary>
        public static Byte3 Zero { get { return new Byte3((byte)0, (byte)0, (byte)0); } }
        /// <summary>Gets the one vector.</summary>
        public static Byte3 One { get { return new Byte3((byte)1, (byte)1, (byte)1); } }
        /// <summary>Gets the unit vector along the X-axis.</summary>
        public static Byte3 UnitX { get { return new Byte3((byte)1, (byte)0, (byte)0); } }
        /// <summary>Gets the unit vector along the Y-axis.</summary>
        public static Byte3 UnitY { get { return new Byte3((byte)0, (byte)1, (byte)0); } }
        /// <summary>Gets the unit vector along the Z-axis.</summary>
        public static Byte3 UnitZ { get { return new Byte3((byte)0, (byte)0, (byte)1); } }

        // --- Indexer ---
        /// <summary>Gets or sets the component at the specified index.</summary>
        public byte this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                switch (index)
                {
                    case 0: return X;
                    case 1: return Y;
                    case 2: return Z;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
                }
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                switch (index)
                {
                    case 0: X = value; break;
                    case 1: Y = value; break;
                    case 2: Z = value; break;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
                }
            }
        }

        // --- Vector-to-Vector Operators ---
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 a, Byte3 b) { return new Byte3((byte)(a.X + b.X), (byte)(a.Y + b.Y), (byte)(a.Z + b.Z)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 a, Byte3 b) { return new Byte3((byte)(a.X - b.X), (byte)(a.Y - b.Y), (byte)(a.Z - b.Z)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 a, Byte3 b) { return new Byte3((byte)(a.X * b.X), (byte)(a.Y * b.Y), (byte)(a.Z * b.Z)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 a, Byte3 b) { return new Byte3((byte)(a.X / b.X), (byte)(a.Y / b.Y), (byte)(a.Z / b.Z)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 a, Byte3 b) { return new Byte3((byte)(a.X % b.X), (byte)(a.Y % b.Y), (byte)(a.Z % b.Z)); }

        // --- Scalar-Vector Operators ---
        /// <summary>float + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(float scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + float operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, float scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>float - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(float scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - float operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, float scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>float * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(float scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * float operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, float scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>float / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, float scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>float / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(float scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % float operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, float scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>float % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(float scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        /// <summary>double + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(double scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + double operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, double scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>double - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(double scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - double operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, double scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>double * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(double scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * double operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, double scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>double / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, double scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>double / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(double scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % double operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, double scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>double % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(double scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        /// <summary>int + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(int scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + int operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, int scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>int - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(int scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - int operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, int scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>int * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(int scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * int operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, int scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>int / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, int scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>int / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(int scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % int operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, int scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>int % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(int scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        /// <summary>byte + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(byte scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + byte operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, byte scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>byte - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(byte scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - byte operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, byte scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>byte * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(byte scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * byte operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, byte scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>byte / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, byte scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>byte / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(byte scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % byte operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, byte scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>byte % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(byte scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        /// <summary>ushort + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(ushort scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, ushort scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>ushort - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(ushort scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, ushort scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>ushort * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(ushort scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, ushort scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>ushort / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, ushort scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>ushort / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(ushort scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, ushort scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>ushort % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(ushort scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        /// <summary>uint + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(uint scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + uint operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, uint scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>uint - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(uint scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - uint operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, uint scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>uint * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(uint scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * uint operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, uint scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>uint / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, uint scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>uint / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(uint scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % uint operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, uint scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>uint % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(uint scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        /// <summary>ulong + Byte3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(ulong scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar + v.X), (byte)(scalar + v.Y), (byte)(scalar + v.Z));
        }

        /// <summary>Byte3 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator +(Byte3 v, ulong scalar)
        {
            return new Byte3((byte)(v.X + scalar), (byte)(v.Y + scalar), (byte)(v.Z + scalar));
        }

        /// <summary>ulong - Byte3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(ulong scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar - v.X), (byte)(scalar - v.Y), (byte)(scalar - v.Z));
        }

        /// <summary>Byte3 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator -(Byte3 v, ulong scalar)
        {
            return new Byte3((byte)(v.X - scalar), (byte)(v.Y - scalar), (byte)(v.Z - scalar));
        }

        /// <summary>ulong * Byte3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(ulong scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar * v.X), (byte)(scalar * v.Y), (byte)(scalar * v.Z));
        }

        /// <summary>Byte3 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator *(Byte3 v, ulong scalar)
        {
            return new Byte3((byte)(v.X * scalar), (byte)(v.Y * scalar), (byte)(v.Z * scalar));
        }

        /// <summary>ulong / Byte3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(Byte3 v, ulong scalar)
        {
            return new Byte3((byte)(v.X / scalar), (byte)(v.Y / scalar), (byte)(v.Z / scalar));
        }

        /// <summary>ulong / Byte3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator /(ulong scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar / v.X), (byte)(scalar / v.Y), (byte)(scalar / v.Z));
        }

        /// <summary>Byte3 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(Byte3 v, ulong scalar)
        {
            return new Byte3((byte)(v.X % scalar), (byte)(v.Y % scalar), (byte)(v.Z % scalar));
        }

        /// <summary>ulong % Byte3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 operator %(ulong scalar, Byte3 v)
        {
            return new Byte3((byte)(scalar % v.X), (byte)(scalar % v.Y), (byte)(scalar % v.Z));
        }

        // --- Component-wise Comparison Operators (Return Boolean Vector) ---
        /// <summary>Returns a Bool3 indicating the result of component-wise < comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator <(Byte3 a, Byte3 b) { return new Bool3(a.X < b.X, a.Y < b.Y, a.Z < b.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise < comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator <(Byte3 a, byte scalar) { return new Bool3(a.X < scalar, a.Y < scalar, a.Z < scalar); }

        /// <summary>Returns a Bool3 indicating the result of component-wise < comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator <(byte scalar, Byte3 a) { return new Bool3(scalar < a.X, scalar < a.Y, scalar < a.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise <= comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator <=(Byte3 a, Byte3 b) { return new Bool3(a.X <= b.X, a.Y <= b.Y, a.Z <= b.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise <= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator <=(Byte3 a, byte scalar) { return new Bool3(a.X <= scalar, a.Y <= scalar, a.Z <= scalar); }

        /// <summary>Returns a Bool3 indicating the result of component-wise <= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator <=(byte scalar, Byte3 a) { return new Bool3(scalar <= a.X, scalar <= a.Y, scalar <= a.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise > comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator >(Byte3 a, Byte3 b) { return new Bool3(a.X > b.X, a.Y > b.Y, a.Z > b.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise > comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator >(Byte3 a, byte scalar) { return new Bool3(a.X > scalar, a.Y > scalar, a.Z > scalar); }

        /// <summary>Returns a Bool3 indicating the result of component-wise > comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator >(byte scalar, Byte3 a) { return new Bool3(scalar > a.X, scalar > a.Y, scalar > a.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise >= comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator >=(Byte3 a, Byte3 b) { return new Bool3(a.X >= b.X, a.Y >= b.Y, a.Z >= b.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise >= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator >=(Byte3 a, byte scalar) { return new Bool3(a.X >= scalar, a.Y >= scalar, a.Z >= scalar); }

        /// <summary>Returns a Bool3 indicating the result of component-wise >= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator >=(byte scalar, Byte3 a) { return new Bool3(scalar >= a.X, scalar >= a.Y, scalar >= a.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise == comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator ==(Byte3 a, Byte3 b) { return new Bool3(a.X == b.X, a.Y == b.Y, a.Z == b.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise == comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator ==(Byte3 a, byte scalar) { return new Bool3(a.X == scalar, a.Y == scalar, a.Z == scalar); }

        /// <summary>Returns a Bool3 indicating the result of component-wise == comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator ==(byte scalar, Byte3 a) { return new Bool3(scalar == a.X, scalar == a.Y, scalar == a.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise != comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator !=(Byte3 a, Byte3 b) { return new Bool3(a.X != b.X, a.Y != b.Y, a.Z != b.Z); }

        /// <summary>Returns a Bool3 indicating the result of component-wise != comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator !=(Byte3 a, byte scalar) { return new Bool3(a.X != scalar, a.Y != scalar, a.Z != scalar); }

        /// <summary>Returns a Bool3 indicating the result of component-wise != comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool3 operator !=(byte scalar, Byte3 a) { return new Bool3(scalar != a.X, scalar != a.Y, scalar != a.Z); }

        // --- Implicit Conversions ---
        /// <summary>Implicitly converts a Byte2 to Byte3 by adding default values for missing components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Byte3(Byte2 value) => new Byte3(value.X, value.Y, (byte)0);

        /// <summary>Explicitly converts Byte3 to Byte2 by truncating components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Byte2(Byte3 value) => new Byte2(value.X, value.Y);

        /// <summary>Implicitly converts Byte3 to Float3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Float3(Byte3 value) => new Float3((float)value.X, (float)value.Y, (float)value.Z);

        /// <summary>Implicitly converts Byte3 to Double3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Double3(Byte3 value) => new Double3((double)value.X, (double)value.Y, (double)value.Z);

        /// <summary>Implicitly converts Byte3 to Int3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Int3(Byte3 value) => new Int3((int)value.X, (int)value.Y, (int)value.Z);

        /// <summary>Implicitly converts Byte3 to UShort3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator UShort3(Byte3 value) => new UShort3((ushort)value.X, (ushort)value.Y, (ushort)value.Z);

        /// <summary>Implicitly converts Byte3 to UInt3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator UInt3(Byte3 value) => new UInt3((uint)value.X, (uint)value.Y, (uint)value.Z);

        /// <summary>Implicitly converts Byte3 to ULong3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator ULong3(Byte3 value) => new ULong3((ulong)value.X, (ulong)value.Y, (ulong)value.Z);

        // --- Methods ---
        /// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 LessThan(Byte3 other) { return new Bool3(X < other.X, Y < other.Y, Z < other.Z); }

        /// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 LessThanOrEqual(Byte3 other) { return new Bool3(X <= other.X, Y <= other.Y, Z <= other.Z); }

        /// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 GreaterThan(Byte3 other) { return new Bool3(X > other.X, Y > other.Y, Z > other.Z); }

        /// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 GreaterThanOrEqual(Byte3 other) { return new Bool3(X >= other.X, Y >= other.Y, Z >= other.Z); }

        /// <summary>Selects components from two vectors based on a boolean mask.</summary>
        /// <param name="mask">Boolean vector mask for selection.</param>
        /// <param name="trueValue">Vector to select from when mask component is true.</param>
        /// <param name="falseValue">Vector to select from when mask component is false.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Byte3 Select(Bool3 mask, Byte3 trueValue, Byte3 falseValue)
        {
            return new Byte3(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y, mask.Z ? trueValue.Z : falseValue.Z);
        }

        /// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 InRange(Byte3 min, Byte3 max)
        {
            return new Bool3(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y, Z >= min.Z && Z <= max.Z);
        }

        /// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 EqualTo(Byte3 other) { return new Bool3(X == other.X, Y == other.Y, Z == other.Z); }

        /// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 NotEqualTo(Byte3 other) { return new Bool3(X != other.X, Y != other.Y, Z != other.Z); }

        /// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 LessThan(byte scalar) { return new Bool3(X < scalar, Y < scalar, Z < scalar); }

        /// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 GreaterThan(byte scalar) { return new Bool3(X > scalar, Y > scalar, Z > scalar); }

        /// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool3 EqualTo(byte scalar) { return new Bool3(X == scalar, Y == scalar, Z == scalar); }

        /// <summary>Returns an array of components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte[] ToArray() { return new byte[] { X, Y, Z }; }
        /// <summary>Returns an array of components.</summary>
        public override bool Equals(object obj) { return obj is Byte3 && Equals((Byte3)obj); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Byte3 other) { return X == other.X && Y == other.Y && Z == other.Z; }

        public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2); }

        public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
            return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + separator + Z.ToString(format, formatProvider) + ")";
        }
    }
}
