//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-13 23:31:57
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;

namespace Prowl.Vector
{
    /// <summary>
    /// Represents a 4-component vector using float precision.
    /// </summary>
    [System.Serializable]
    public partial struct Float4 : IEquatable<Float4>, IFormattable
    {
        public float X, Y, Z, W;

        // --- Constructors ---
        /// <summary>Initializes all components to a single scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(float scalar) : this(scalar, scalar, scalar, scalar) { }

        /// <summary>Initializes with specified component values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(float x, float y, float z, float w)
        {
            X = x;
            Y = y;
            Z = z;
            W = w;
        }

        /// <summary>Initializes by copying components from another Float4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Float4 v) : this(v.X, v.Y, v.Z, v.W) { }

        /// <summary>Initializes from an array.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(float[] array)
        {
            if (array == null) throw new ArgumentNullException(nameof(array));
            if (array.Length < 4) throw new ArgumentException("Array must contain at least 4 elements.", nameof(array));
            X = array[0];
            Y = array[1];
            Z = array[2];
            W = array[3];
        }

        /// <summary>Initializes from a Float2 and Z, W components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Float2 xy, float z, float w) : this(xy.X, xy.Y, z, w) { }

        /// <summary>Initializes from X component, a Float2, and W component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(float x, Float2 yz, float w) : this(x, yz.X, yz.Y, w) { }

        /// <summary>Initializes from X, Y components and a Float2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(float x, float y, Float2 zw) : this(x, y, zw.X, zw.Y) { }

        /// <summary>Initializes from two Float2 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Float2 xy, Float2 zw) : this(xy.X, xy.Y, zw.X, zw.Y) { }

        /// <summary>Initializes from a Float3 and W component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Float3 xyz, float w) : this(xyz.X, xyz.Y, xyz.Z, w) { }

        /// <summary>Initializes from X component and a Float3.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(float x, Float3 yzw) : this(x, yzw.X, yzw.Y, yzw.Z) { }

        // --- Type Conversion Constructors ---
        /// <summary>Initializes from a Double4 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Double4 v) : this((float)v.X, (float)v.Y, (float)v.Z, (float)v.W) { }

        /// <summary>Initializes from a Int4 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Int4 v) : this((float)v.X, (float)v.Y, (float)v.Z, (float)v.W) { }

        /// <summary>Initializes from a Byte4 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Byte4 v) : this((float)v.X, (float)v.Y, (float)v.Z, (float)v.W) { }

        /// <summary>Initializes from a UShort4 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(UShort4 v) : this((float)v.X, (float)v.Y, (float)v.Z, (float)v.W) { }

        /// <summary>Initializes from a UInt4 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(UInt4 v) : this((float)v.X, (float)v.Y, (float)v.Z, (float)v.W) { }

        /// <summary>Initializes from a ULong4 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(ULong4 v) : this((float)v.X, (float)v.Y, (float)v.Z, (float)v.W) { }

        // --- Collection Constructors ---
        /// <summary>Initializes from an IEnumerable collection.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(IEnumerable<float> values)
        {
            var array = values.ToArray();
            if (array.Length < 4) throw new ArgumentException("Collection must contain at least 4 elements.", nameof(values));
            X = array[0];
            Y = array[1];
            Z = array[2];
            W = array[3];
        }

        /// <summary>Initializes from a ReadOnlySpan.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(ReadOnlySpan<float> span)
        {
            if (span.Length < 4) throw new ArgumentException("Span must contain at least 4 elements.", nameof(span));
            X = span[0];
            Y = span[1];
            Z = span[2];
            W = span[3];
        }

        /// <summary>Initializes from a Span.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Float4(Span<float> span)
        {
            if (span.Length < 4) throw new ArgumentException("Span must contain at least 4 elements.", nameof(span));
            X = span[0];
            Y = span[1];
            Z = span[2];
            W = span[3];
        }

        // --- Static Properties ---
        /// <summary>Gets the zero vector.</summary>
        public static Float4 Zero { get { return new Float4(0f, 0f, 0f, 0f); } }
        /// <summary>Gets the one vector.</summary>
        public static Float4 One { get { return new Float4(1f, 1f, 1f, 1f); } }
        /// <summary>Gets the unit vector along the X-axis.</summary>
        public static Float4 UnitX { get { return new Float4(1f, 0f, 0f, 0f); } }
        /// <summary>Gets the unit vector along the Y-axis.</summary>
        public static Float4 UnitY { get { return new Float4(0f, 1f, 0f, 0f); } }
        /// <summary>Gets the unit vector along the Z-axis.</summary>
        public static Float4 UnitZ { get { return new Float4(0f, 0f, 1f, 0f); } }
        /// <summary>Gets the unit vector along the W-axis.</summary>
        public static Float4 UnitW { get { return new Float4(0f, 0f, 0f, 1f); } }

        // --- Properties ---
        /// <summary>Gets the magnitude (length) of the vector.</summary>
        public float Length
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return MathF.Sqrt(LengthSquared); }
        }

        /// <summary>Gets the squared magnitude (length) of the vector.</summary>
        public float LengthSquared
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return X * X + Y * Y + Z * Z + W * W; }
        }

        /// <summary>Gets a normalized version of this vector.</summary>
        public Float4 Normalized
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                float lenSq = LengthSquared;
                if (lenSq <= float.Epsilon * float.Epsilon)
                {
                    return Zero;
                }
                float invLength = 1f / MathF.Sqrt(lenSq);
                return new Float4(X * invLength, Y * invLength, Z * invLength, W * invLength);
            }
        }

        // --- Indexer ---
        /// <summary>Gets or sets the component at the specified index.</summary>
        public float this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                switch (index)
                {
                    case 0: return X;
                    case 1: return Y;
                    case 2: return Z;
                    case 3: return W;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 3, but was {0}", index));
                }
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                switch (index)
                {
                    case 0: X = value; break;
                    case 1: Y = value; break;
                    case 2: Z = value; break;
                    case 3: W = value; break;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 3, but was {0}", index));
                }
            }
        }

        // --- Vector-to-Vector Operators ---
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 a, Float4 b) { return new Float4(a.X + b.X, a.Y + b.Y, a.Z + b.Z, a.W + b.W); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 a, Float4 b) { return new Float4(a.X - b.X, a.Y - b.Y, a.Z - b.Z, a.W - b.W); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 a, Float4 b) { return new Float4(a.X * b.X, a.Y * b.Y, a.Z * b.Z, a.W * b.W); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 a, Float4 b) { return new Float4(a.X / b.X, a.Y / b.Y, a.Z / b.Z, a.W / b.W); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 a, Float4 b) { return new Float4(a.X % b.X, a.Y % b.Y, a.Z % b.Z, a.W % b.W); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v) { return new Float4(-v.X, -v.Y, -v.Z, -v.W); }

        // --- Scalar-Vector Operators ---
        /// <summary>float + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(float scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + float operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, float scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>float - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(float scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - float operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, float scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>float * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(float scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * float operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, float scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>float / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, float scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>float / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(float scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % float operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, float scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>float % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(float scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        /// <summary>double + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(double scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + double operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, double scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>double - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(double scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - double operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, double scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>double * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(double scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * double operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, double scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>double / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, double scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>double / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(double scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % double operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, double scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>double % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(double scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        /// <summary>int + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(int scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + int operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, int scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>int - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(int scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - int operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, int scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>int * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(int scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * int operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, int scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>int / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, int scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>int / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(int scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % int operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, int scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>int % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(int scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        /// <summary>byte + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(byte scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + byte operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, byte scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>byte - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(byte scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - byte operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, byte scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>byte * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(byte scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * byte operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, byte scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>byte / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, byte scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>byte / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(byte scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % byte operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, byte scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>byte % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(byte scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        /// <summary>ushort + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(ushort scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, ushort scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>ushort - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(ushort scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, ushort scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>ushort * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(ushort scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, ushort scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>ushort / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, ushort scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>ushort / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(ushort scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, ushort scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>ushort % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(ushort scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        /// <summary>uint + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(uint scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + uint operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, uint scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>uint - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(uint scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - uint operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, uint scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>uint * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(uint scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * uint operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, uint scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>uint / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, uint scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>uint / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(uint scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % uint operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, uint scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>uint % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(uint scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        /// <summary>ulong + Float4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(ulong scalar, Float4 v)
        {
            return new Float4((float)(scalar + v.X), (float)(scalar + v.Y), (float)(scalar + v.Z), (float)(scalar + v.W));
        }

        /// <summary>Float4 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator +(Float4 v, ulong scalar)
        {
            return new Float4((float)(v.X + scalar), (float)(v.Y + scalar), (float)(v.Z + scalar), (float)(v.W + scalar));
        }

        /// <summary>ulong - Float4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(ulong scalar, Float4 v)
        {
            return new Float4((float)(scalar - v.X), (float)(scalar - v.Y), (float)(scalar - v.Z), (float)(scalar - v.W));
        }

        /// <summary>Float4 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator -(Float4 v, ulong scalar)
        {
            return new Float4((float)(v.X - scalar), (float)(v.Y - scalar), (float)(v.Z - scalar), (float)(v.W - scalar));
        }

        /// <summary>ulong * Float4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(ulong scalar, Float4 v)
        {
            return new Float4((float)(scalar * v.X), (float)(scalar * v.Y), (float)(scalar * v.Z), (float)(scalar * v.W));
        }

        /// <summary>Float4 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator *(Float4 v, ulong scalar)
        {
            return new Float4((float)(v.X * scalar), (float)(v.Y * scalar), (float)(v.Z * scalar), (float)(v.W * scalar));
        }

        /// <summary>ulong / Float4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(Float4 v, ulong scalar)
        {
            return new Float4((float)(v.X / scalar), (float)(v.Y / scalar), (float)(v.Z / scalar), (float)(v.W / scalar));
        }

        /// <summary>ulong / Float4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator /(ulong scalar, Float4 v)
        {
            return new Float4((float)(scalar / v.X), (float)(scalar / v.Y), (float)(scalar / v.Z), (float)(scalar / v.W));
        }

        /// <summary>Float4 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(Float4 v, ulong scalar)
        {
            return new Float4((float)(v.X % scalar), (float)(v.Y % scalar), (float)(v.Z % scalar), (float)(v.W % scalar));
        }

        /// <summary>ulong % Float4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 operator %(ulong scalar, Float4 v)
        {
            return new Float4((float)(scalar % v.X), (float)(scalar % v.Y), (float)(scalar % v.Z), (float)(scalar % v.W));
        }

        // --- Component-wise Comparison Operators (Return Boolean Vector) ---
        /// <summary>Returns a Bool4 indicating the result of component-wise < comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator <(Float4 a, Float4 b) { return new Bool4(a.X < b.X, a.Y < b.Y, a.Z < b.Z, a.W < b.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise < comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator <(Float4 a, float scalar) { return new Bool4(a.X < scalar, a.Y < scalar, a.Z < scalar, a.W < scalar); }

        /// <summary>Returns a Bool4 indicating the result of component-wise < comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator <(float scalar, Float4 a) { return new Bool4(scalar < a.X, scalar < a.Y, scalar < a.Z, scalar < a.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise <= comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator <=(Float4 a, Float4 b) { return new Bool4(a.X <= b.X, a.Y <= b.Y, a.Z <= b.Z, a.W <= b.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise <= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator <=(Float4 a, float scalar) { return new Bool4(a.X <= scalar, a.Y <= scalar, a.Z <= scalar, a.W <= scalar); }

        /// <summary>Returns a Bool4 indicating the result of component-wise <= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator <=(float scalar, Float4 a) { return new Bool4(scalar <= a.X, scalar <= a.Y, scalar <= a.Z, scalar <= a.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise > comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator >(Float4 a, Float4 b) { return new Bool4(a.X > b.X, a.Y > b.Y, a.Z > b.Z, a.W > b.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise > comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator >(Float4 a, float scalar) { return new Bool4(a.X > scalar, a.Y > scalar, a.Z > scalar, a.W > scalar); }

        /// <summary>Returns a Bool4 indicating the result of component-wise > comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator >(float scalar, Float4 a) { return new Bool4(scalar > a.X, scalar > a.Y, scalar > a.Z, scalar > a.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise >= comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator >=(Float4 a, Float4 b) { return new Bool4(a.X >= b.X, a.Y >= b.Y, a.Z >= b.Z, a.W >= b.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise >= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator >=(Float4 a, float scalar) { return new Bool4(a.X >= scalar, a.Y >= scalar, a.Z >= scalar, a.W >= scalar); }

        /// <summary>Returns a Bool4 indicating the result of component-wise >= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator >=(float scalar, Float4 a) { return new Bool4(scalar >= a.X, scalar >= a.Y, scalar >= a.Z, scalar >= a.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise == comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator ==(Float4 a, Float4 b) { return new Bool4(a.X == b.X, a.Y == b.Y, a.Z == b.Z, a.W == b.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise == comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator ==(Float4 a, float scalar) { return new Bool4(a.X == scalar, a.Y == scalar, a.Z == scalar, a.W == scalar); }

        /// <summary>Returns a Bool4 indicating the result of component-wise == comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator ==(float scalar, Float4 a) { return new Bool4(scalar == a.X, scalar == a.Y, scalar == a.Z, scalar == a.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise != comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator !=(Float4 a, Float4 b) { return new Bool4(a.X != b.X, a.Y != b.Y, a.Z != b.Z, a.W != b.W); }

        /// <summary>Returns a Bool4 indicating the result of component-wise != comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator !=(Float4 a, float scalar) { return new Bool4(a.X != scalar, a.Y != scalar, a.Z != scalar, a.W != scalar); }

        /// <summary>Returns a Bool4 indicating the result of component-wise != comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool4 operator !=(float scalar, Float4 a) { return new Bool4(scalar != a.X, scalar != a.Y, scalar != a.Z, scalar != a.W); }

        // --- Implicit Conversions ---
        /// <summary>Implicitly converts this Float4 to a System.Numerics.Vector4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Vector4(Float4 value) => new Vector4(value.X, value.Y, value.Z, value.W);

        /// <summary>Implicitly converts a System.Numerics.Vector4 to this Float4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Float4(Vector4 value) => new Float4(value.X, value.Y, value.Z, value.W);

        /// <summary>Implicitly converts a Float2 to Float4 by adding default values for missing components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Float4(Float2 value) => new Float4(value.X, value.Y, 0f, 0f);

        /// <summary>Implicitly converts a Float3 to Float4 by adding default values for missing components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Float4(Float3 value) => new Float4(value.X, value.Y, value.Z, 0f);

        /// <summary>Explicitly converts Float4 to Float2 by truncating components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Float2(Float4 value) => new Float2(value.X, value.Y);

        /// <summary>Explicitly converts Float4 to Float3 by truncating components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Float3(Float4 value) => new Float3(value.X, value.Y, value.Z);

        /// <summary>Implicitly converts Float4 to Double4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Double4(Float4 value) => new Double4((double)value.X, (double)value.Y, (double)value.Z, (double)value.W);

        /// <summary>Explicitly converts Float4 to Int4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Int4(Float4 value) => new Int4((int)value.X, (int)value.Y, (int)value.Z, (int)value.W);

        /// <summary>Explicitly converts Float4 to Byte4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Byte4(Float4 value) => new Byte4((byte)value.X, (byte)value.Y, (byte)value.Z, (byte)value.W);

        /// <summary>Explicitly converts Float4 to UShort4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator UShort4(Float4 value) => new UShort4((ushort)value.X, (ushort)value.Y, (ushort)value.Z, (ushort)value.W);

        /// <summary>Explicitly converts Float4 to UInt4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator UInt4(Float4 value) => new UInt4((uint)value.X, (uint)value.Y, (uint)value.Z, (uint)value.W);

        /// <summary>Explicitly converts Float4 to ULong4.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator ULong4(Float4 value) => new ULong4((ulong)value.X, (ulong)value.Y, (ulong)value.Z, (ulong)value.W);

        // --- Methods ---
        /// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 LessThan(Float4 other) { return new Bool4(X < other.X, Y < other.Y, Z < other.Z, W < other.W); }

        /// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 LessThanOrEqual(Float4 other) { return new Bool4(X <= other.X, Y <= other.Y, Z <= other.Z, W <= other.W); }

        /// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 GreaterThan(Float4 other) { return new Bool4(X > other.X, Y > other.Y, Z > other.Z, W > other.W); }

        /// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 GreaterThanOrEqual(Float4 other) { return new Bool4(X >= other.X, Y >= other.Y, Z >= other.Z, W >= other.W); }

        /// <summary>Selects components from two vectors based on a boolean mask.</summary>
        /// <param name="mask">Boolean vector mask for selection.</param>
        /// <param name="trueValue">Vector to select from when mask component is true.</param>
        /// <param name="falseValue">Vector to select from when mask component is false.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Float4 Select(Bool4 mask, Float4 trueValue, Float4 falseValue)
        {
            return new Float4(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y, mask.Z ? trueValue.Z : falseValue.Z, mask.W ? trueValue.W : falseValue.W);
        }

        /// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 InRange(Float4 min, Float4 max)
        {
            return new Bool4(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y, Z >= min.Z && Z <= max.Z, W >= min.W && W <= max.W);
        }

        /// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 EqualTo(Float4 other) { return new Bool4(X == other.X, Y == other.Y, Z == other.Z, W == other.W); }

        /// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 NotEqualTo(Float4 other) { return new Bool4(X != other.X, Y != other.Y, Z != other.Z, W != other.W); }

        /// <summary>Returns a boolean vector indicating which components are approximately equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 ApproximatelyEqualTo(Float4 other) { return new Bool4(MathF.Abs(X - other.X) <= float.Epsilon, MathF.Abs(Y - other.Y) <= float.Epsilon, MathF.Abs(Z - other.Z) <= float.Epsilon, MathF.Abs(W - other.W) <= float.Epsilon); }

        /// <summary>Returns a boolean vector indicating which components are approximately equal to the corresponding components of another vector with a custom tolerance.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 ApproximatelyEqualTo(Float4 other, float tolerance)
        {
            return new Bool4(MathF.Abs(X - other.X) <= tolerance, MathF.Abs(Y - other.Y) <= tolerance, MathF.Abs(Z - other.Z) <= tolerance, MathF.Abs(W - other.W) <= tolerance);
        }

        /// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 LessThan(float scalar) { return new Bool4(X < scalar, Y < scalar, Z < scalar, W < scalar); }

        /// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 GreaterThan(float scalar) { return new Bool4(X > scalar, Y > scalar, Z > scalar, W > scalar); }

        /// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool4 EqualTo(float scalar) { return new Bool4(X == scalar, Y == scalar, Z == scalar, W == scalar); }

        public override bool Equals(object obj) { return obj is Float4 && Equals((Float4)obj); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(Float4 other) { return X == other.X && Y == other.Y && Z == other.Z && W == other.W; }

        public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2) ^ (W.GetHashCode() >> 1); }

        public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
            return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + separator + Z.ToString(format, formatProvider) + separator + W.ToString(format, formatProvider) + ")";
        }
    }
}
