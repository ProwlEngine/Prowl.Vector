//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-11 14:12:57
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{

/// <summary>
/// Represents a 4-component vector using int precision.
/// </summary>
[System.Serializable]
public partial struct Int4 : IEquatable<Int4>, IFormattable
{
	public int X, Y, Z, W;

	// --- Constructors ---
	/// <summary>Initializes all components to a single scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(int scalar) : this(scalar, scalar, scalar, scalar) { }

	/// <summary>Initializes with specified component values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(int x, int y, int z, int w)
	{
		X = x;
		Y = y;
		Z = z;
		W = w;
	}

	/// <summary>Initializes by copying components from another Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Int4 v) : this(v.X, v.Y, v.Z, v.W) { }

	/// <summary>Initializes from an array.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(int[] array)
	{
		if (array == null) throw new ArgumentNullException(nameof(array));
		if (array.Length < 4) throw new ArgumentException("Array must contain at least 4 elements.", nameof(array));
		X = array[0];
		Y = array[1];
		Z = array[2];
		W = array[3];
	}

	/// <summary>Initializes from a Int2 and Z, W components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Int2 xy, int z, int w) : this(xy.X, xy.Y, z, w) { }

	/// <summary>Initializes from X component, a Int2, and W component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(int x, Int2 yz, int w) : this(x, yz.X, yz.Y, w) { }

	/// <summary>Initializes from X, Y components and a Int2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(int x, int y, Int2 zw) : this(x, y, zw.X, zw.Y) { }

	/// <summary>Initializes from two Int2 vectors.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Int2 xy, Int2 zw) : this(xy.X, xy.Y, zw.X, zw.Y) { }

	/// <summary>Initializes from a Int3 and W component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Int3 xyz, int w) : this(xyz.X, xyz.Y, xyz.Z, w) { }

	/// <summary>Initializes from X component and a Int3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(int x, Int3 yzw) : this(x, yzw.X, yzw.Y, yzw.Z) { }

	// --- Type Conversion Constructors ---
	/// <summary>Initializes from a Float4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Float4 v) : this((int)v.X, (int)v.Y, (int)v.Z, (int)v.W) { }

	/// <summary>Initializes from a Double4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Double4 v) : this((int)v.X, (int)v.Y, (int)v.Z, (int)v.W) { }

	/// <summary>Initializes from a Byte4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Byte4 v) : this((int)v.X, (int)v.Y, (int)v.Z, (int)v.W) { }

	/// <summary>Initializes from a UShort4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(UShort4 v) : this((int)v.X, (int)v.Y, (int)v.Z, (int)v.W) { }

	/// <summary>Initializes from a UInt4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(UInt4 v) : this((int)v.X, (int)v.Y, (int)v.Z, (int)v.W) { }

	/// <summary>Initializes from a ULong4 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(ULong4 v) : this((int)v.X, (int)v.Y, (int)v.Z, (int)v.W) { }

	// --- Collection Constructors ---
	/// <summary>Initializes from an IEnumerable collection.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(IEnumerable<int> values)
	{
		var array = values.ToArray();
		if (array.Length < 4) throw new ArgumentException("Collection must contain at least 4 elements.", nameof(values));
		X = array[0];
		Y = array[1];
		Z = array[2];
		W = array[3];
	}

	/// <summary>Initializes from a ReadOnlySpan.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(ReadOnlySpan<int> span)
	{
		if (span.Length < 4) throw new ArgumentException("Span must contain at least 4 elements.", nameof(span));
		X = span[0];
		Y = span[1];
		Z = span[2];
		W = span[3];
	}

	/// <summary>Initializes from a Span.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Int4(Span<int> span)
	{
		if (span.Length < 4) throw new ArgumentException("Span must contain at least 4 elements.", nameof(span));
		X = span[0];
		Y = span[1];
		Z = span[2];
		W = span[3];
	}

	// --- Static Properties ---
	/// <summary>Gets the zero vector.</summary>
	public static Int4 Zero { get { return new Int4(0, 0, 0, 0); } }
	/// <summary>Gets the one vector.</summary>
	public static Int4 One { get { return new Int4(1, 1, 1, 1); } }
	/// <summary>Gets the unit vector along the X-axis.</summary>
	public static Int4 UnitX { get { return new Int4(1, 0, 0, 0); } }
	/// <summary>Gets the unit vector along the Y-axis.</summary>
	public static Int4 UnitY { get { return new Int4(0, 1, 0, 0); } }
	/// <summary>Gets the unit vector along the Z-axis.</summary>
	public static Int4 UnitZ { get { return new Int4(0, 0, 1, 0); } }
	/// <summary>Gets the unit vector along the W-axis.</summary>
	public static Int4 UnitW { get { return new Int4(0, 0, 0, 1); } }

	// --- Indexer ---
	/// <summary>Gets or sets the component at the specified index.</summary>
	public int this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			switch (index)
			{
				case 0: return X;
				case 1: return Y;
				case 2: return Z;
				case 3: return W;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 3, but was {0}", index));
			}
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			switch (index)
			{
				case 0: X = value; break;
				case 1: Y = value; break;
				case 2: Z = value; break;
				case 3: W = value; break;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 3, but was {0}", index));
			}
		}
	}

	// --- Vector-to-Vector Operators ---
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 a, Int4 b) { return new Int4(a.X + b.X, a.Y + b.Y, a.Z + b.Z, a.W + b.W); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 a, Int4 b) { return new Int4(a.X - b.X, a.Y - b.Y, a.Z - b.Z, a.W - b.W); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 a, Int4 b) { return new Int4(a.X * b.X, a.Y * b.Y, a.Z * b.Z, a.W * b.W); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 a, Int4 b) { return new Int4(a.X / b.X, a.Y / b.Y, a.Z / b.Z, a.W / b.W); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 a, Int4 b) { return new Int4(a.X % b.X, a.Y % b.Y, a.Z % b.Z, a.W % b.W); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v) { return new Int4(-v.X, -v.Y, -v.Z, -v.W); }

	// --- Scalar-Vector Operators ---
	/// <summary>float + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(float scalar, Int4 v)
	{
		return new Int4((int)(scalar + v.X), (int)(scalar + v.Y), (int)(scalar + v.Z), (int)(scalar + v.W));
	}

	/// <summary>Int4 + float operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, float scalar)
	{
		return new Int4((int)(v.X + scalar), (int)(v.Y + scalar), (int)(v.Z + scalar), (int)(v.W + scalar));
	}

	/// <summary>float - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(float scalar, Int4 v)
	{
		return new Int4((int)(scalar - v.X), (int)(scalar - v.Y), (int)(scalar - v.Z), (int)(scalar - v.W));
	}

	/// <summary>Int4 - float operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, float scalar)
	{
		return new Int4((int)(v.X - scalar), (int)(v.Y - scalar), (int)(v.Z - scalar), (int)(v.W - scalar));
	}

	/// <summary>float * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(float scalar, Int4 v)
	{
		return new Int4((int)(scalar * v.X), (int)(scalar * v.Y), (int)(scalar * v.Z), (int)(scalar * v.W));
	}

	/// <summary>Int4 * float operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, float scalar)
	{
		return new Int4((int)(v.X * scalar), (int)(v.Y * scalar), (int)(v.Z * scalar), (int)(v.W * scalar));
	}

	/// <summary>float / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, float scalar)
	{
		return new Int4((int)(v.X / scalar), (int)(v.Y / scalar), (int)(v.Z / scalar), (int)(v.W / scalar));
	}

	/// <summary>float / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(float scalar, Int4 v)
	{
		return new Int4((int)(scalar / v.X), (int)(scalar / v.Y), (int)(scalar / v.Z), (int)(scalar / v.W));
	}

	/// <summary>Int4 % float operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, float scalar)
	{
		return new Int4((int)(v.X % scalar), (int)(v.Y % scalar), (int)(v.Z % scalar), (int)(v.W % scalar));
	}

	/// <summary>float % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(float scalar, Int4 v)
	{
		return new Int4((int)(scalar % v.X), (int)(scalar % v.Y), (int)(scalar % v.Z), (int)(scalar % v.W));
	}

	/// <summary>double + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(double scalar, Int4 v)
	{
		return new Int4((int)(scalar + v.X), (int)(scalar + v.Y), (int)(scalar + v.Z), (int)(scalar + v.W));
	}

	/// <summary>Int4 + double operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, double scalar)
	{
		return new Int4((int)(v.X + scalar), (int)(v.Y + scalar), (int)(v.Z + scalar), (int)(v.W + scalar));
	}

	/// <summary>double - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(double scalar, Int4 v)
	{
		return new Int4((int)(scalar - v.X), (int)(scalar - v.Y), (int)(scalar - v.Z), (int)(scalar - v.W));
	}

	/// <summary>Int4 - double operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, double scalar)
	{
		return new Int4((int)(v.X - scalar), (int)(v.Y - scalar), (int)(v.Z - scalar), (int)(v.W - scalar));
	}

	/// <summary>double * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(double scalar, Int4 v)
	{
		return new Int4((int)(scalar * v.X), (int)(scalar * v.Y), (int)(scalar * v.Z), (int)(scalar * v.W));
	}

	/// <summary>Int4 * double operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, double scalar)
	{
		return new Int4((int)(v.X * scalar), (int)(v.Y * scalar), (int)(v.Z * scalar), (int)(v.W * scalar));
	}

	/// <summary>double / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, double scalar)
	{
		return new Int4((int)(v.X / scalar), (int)(v.Y / scalar), (int)(v.Z / scalar), (int)(v.W / scalar));
	}

	/// <summary>double / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(double scalar, Int4 v)
	{
		return new Int4((int)(scalar / v.X), (int)(scalar / v.Y), (int)(scalar / v.Z), (int)(scalar / v.W));
	}

	/// <summary>Int4 % double operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, double scalar)
	{
		return new Int4((int)(v.X % scalar), (int)(v.Y % scalar), (int)(v.Z % scalar), (int)(v.W % scalar));
	}

	/// <summary>double % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(double scalar, Int4 v)
	{
		return new Int4((int)(scalar % v.X), (int)(scalar % v.Y), (int)(scalar % v.Z), (int)(scalar % v.W));
	}

	/// <summary>int + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(int scalar, Int4 v)
	{
		return new Int4((int)(scalar + v.X), (int)(scalar + v.Y), (int)(scalar + v.Z), (int)(scalar + v.W));
	}

	/// <summary>Int4 + int operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, int scalar)
	{
		return new Int4((int)(v.X + scalar), (int)(v.Y + scalar), (int)(v.Z + scalar), (int)(v.W + scalar));
	}

	/// <summary>int - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(int scalar, Int4 v)
	{
		return new Int4((int)(scalar - v.X), (int)(scalar - v.Y), (int)(scalar - v.Z), (int)(scalar - v.W));
	}

	/// <summary>Int4 - int operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, int scalar)
	{
		return new Int4((int)(v.X - scalar), (int)(v.Y - scalar), (int)(v.Z - scalar), (int)(v.W - scalar));
	}

	/// <summary>int * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(int scalar, Int4 v)
	{
		return new Int4((int)(scalar * v.X), (int)(scalar * v.Y), (int)(scalar * v.Z), (int)(scalar * v.W));
	}

	/// <summary>Int4 * int operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, int scalar)
	{
		return new Int4((int)(v.X * scalar), (int)(v.Y * scalar), (int)(v.Z * scalar), (int)(v.W * scalar));
	}

	/// <summary>int / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, int scalar)
	{
		return new Int4((int)(v.X / scalar), (int)(v.Y / scalar), (int)(v.Z / scalar), (int)(v.W / scalar));
	}

	/// <summary>int / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(int scalar, Int4 v)
	{
		return new Int4((int)(scalar / v.X), (int)(scalar / v.Y), (int)(scalar / v.Z), (int)(scalar / v.W));
	}

	/// <summary>Int4 % int operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, int scalar)
	{
		return new Int4((int)(v.X % scalar), (int)(v.Y % scalar), (int)(v.Z % scalar), (int)(v.W % scalar));
	}

	/// <summary>int % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(int scalar, Int4 v)
	{
		return new Int4((int)(scalar % v.X), (int)(scalar % v.Y), (int)(scalar % v.Z), (int)(scalar % v.W));
	}

	/// <summary>byte + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(byte scalar, Int4 v)
	{
		return new Int4((int)(scalar + v.X), (int)(scalar + v.Y), (int)(scalar + v.Z), (int)(scalar + v.W));
	}

	/// <summary>Int4 + byte operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, byte scalar)
	{
		return new Int4((int)(v.X + scalar), (int)(v.Y + scalar), (int)(v.Z + scalar), (int)(v.W + scalar));
	}

	/// <summary>byte - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(byte scalar, Int4 v)
	{
		return new Int4((int)(scalar - v.X), (int)(scalar - v.Y), (int)(scalar - v.Z), (int)(scalar - v.W));
	}

	/// <summary>Int4 - byte operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, byte scalar)
	{
		return new Int4((int)(v.X - scalar), (int)(v.Y - scalar), (int)(v.Z - scalar), (int)(v.W - scalar));
	}

	/// <summary>byte * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(byte scalar, Int4 v)
	{
		return new Int4((int)(scalar * v.X), (int)(scalar * v.Y), (int)(scalar * v.Z), (int)(scalar * v.W));
	}

	/// <summary>Int4 * byte operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, byte scalar)
	{
		return new Int4((int)(v.X * scalar), (int)(v.Y * scalar), (int)(v.Z * scalar), (int)(v.W * scalar));
	}

	/// <summary>byte / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, byte scalar)
	{
		return new Int4((int)(v.X / scalar), (int)(v.Y / scalar), (int)(v.Z / scalar), (int)(v.W / scalar));
	}

	/// <summary>byte / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(byte scalar, Int4 v)
	{
		return new Int4((int)(scalar / v.X), (int)(scalar / v.Y), (int)(scalar / v.Z), (int)(scalar / v.W));
	}

	/// <summary>Int4 % byte operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, byte scalar)
	{
		return new Int4((int)(v.X % scalar), (int)(v.Y % scalar), (int)(v.Z % scalar), (int)(v.W % scalar));
	}

	/// <summary>byte % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(byte scalar, Int4 v)
	{
		return new Int4((int)(scalar % v.X), (int)(scalar % v.Y), (int)(scalar % v.Z), (int)(scalar % v.W));
	}

	/// <summary>ushort + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(ushort scalar, Int4 v)
	{
		return new Int4((int)(scalar + v.X), (int)(scalar + v.Y), (int)(scalar + v.Z), (int)(scalar + v.W));
	}

	/// <summary>Int4 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, ushort scalar)
	{
		return new Int4((int)(v.X + scalar), (int)(v.Y + scalar), (int)(v.Z + scalar), (int)(v.W + scalar));
	}

	/// <summary>ushort - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(ushort scalar, Int4 v)
	{
		return new Int4((int)(scalar - v.X), (int)(scalar - v.Y), (int)(scalar - v.Z), (int)(scalar - v.W));
	}

	/// <summary>Int4 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, ushort scalar)
	{
		return new Int4((int)(v.X - scalar), (int)(v.Y - scalar), (int)(v.Z - scalar), (int)(v.W - scalar));
	}

	/// <summary>ushort * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(ushort scalar, Int4 v)
	{
		return new Int4((int)(scalar * v.X), (int)(scalar * v.Y), (int)(scalar * v.Z), (int)(scalar * v.W));
	}

	/// <summary>Int4 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, ushort scalar)
	{
		return new Int4((int)(v.X * scalar), (int)(v.Y * scalar), (int)(v.Z * scalar), (int)(v.W * scalar));
	}

	/// <summary>ushort / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, ushort scalar)
	{
		return new Int4((int)(v.X / scalar), (int)(v.Y / scalar), (int)(v.Z / scalar), (int)(v.W / scalar));
	}

	/// <summary>ushort / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(ushort scalar, Int4 v)
	{
		return new Int4((int)(scalar / v.X), (int)(scalar / v.Y), (int)(scalar / v.Z), (int)(scalar / v.W));
	}

	/// <summary>Int4 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, ushort scalar)
	{
		return new Int4((int)(v.X % scalar), (int)(v.Y % scalar), (int)(v.Z % scalar), (int)(v.W % scalar));
	}

	/// <summary>ushort % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(ushort scalar, Int4 v)
	{
		return new Int4((int)(scalar % v.X), (int)(scalar % v.Y), (int)(scalar % v.Z), (int)(scalar % v.W));
	}

	/// <summary>uint + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(uint scalar, Int4 v)
	{
		return new Int4((int)(scalar + v.X), (int)(scalar + v.Y), (int)(scalar + v.Z), (int)(scalar + v.W));
	}

	/// <summary>Int4 + uint operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, uint scalar)
	{
		return new Int4((int)(v.X + scalar), (int)(v.Y + scalar), (int)(v.Z + scalar), (int)(v.W + scalar));
	}

	/// <summary>uint - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(uint scalar, Int4 v)
	{
		return new Int4((int)(scalar - v.X), (int)(scalar - v.Y), (int)(scalar - v.Z), (int)(scalar - v.W));
	}

	/// <summary>Int4 - uint operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, uint scalar)
	{
		return new Int4((int)(v.X - scalar), (int)(v.Y - scalar), (int)(v.Z - scalar), (int)(v.W - scalar));
	}

	/// <summary>uint * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(uint scalar, Int4 v)
	{
		return new Int4((int)(scalar * v.X), (int)(scalar * v.Y), (int)(scalar * v.Z), (int)(scalar * v.W));
	}

	/// <summary>Int4 * uint operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, uint scalar)
	{
		return new Int4((int)(v.X * scalar), (int)(v.Y * scalar), (int)(v.Z * scalar), (int)(v.W * scalar));
	}

	/// <summary>uint / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, uint scalar)
	{
		return new Int4((int)(v.X / scalar), (int)(v.Y / scalar), (int)(v.Z / scalar), (int)(v.W / scalar));
	}

	/// <summary>uint / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(uint scalar, Int4 v)
	{
		return new Int4((int)(scalar / v.X), (int)(scalar / v.Y), (int)(scalar / v.Z), (int)(scalar / v.W));
	}

	/// <summary>Int4 % uint operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, uint scalar)
	{
		return new Int4((int)(v.X % scalar), (int)(v.Y % scalar), (int)(v.Z % scalar), (int)(v.W % scalar));
	}

	/// <summary>uint % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(uint scalar, Int4 v)
	{
		return new Int4((int)(scalar % v.X), (int)(scalar % v.Y), (int)(scalar % v.Z), (int)(scalar % v.W));
	}

	/// <summary>ulong + Int4 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z, scalar + v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(ulong scalar, Int4 v)
	{
		return new Int4((int)((int)scalar + v.X), (int)((int)scalar + v.Y), (int)((int)scalar + v.Z), (int)((int)scalar + v.W));
	}

	/// <summary>Int4 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar, v.W + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator +(Int4 v, ulong scalar)
	{
		return new Int4((int)(v.X + (int)scalar), (int)(v.Y + (int)scalar), (int)(v.Z + (int)scalar), (int)(v.W + (int)scalar));
	}

	/// <summary>ulong - Int4 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z, scalar - v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(ulong scalar, Int4 v)
	{
		return new Int4((int)((int)scalar - v.X), (int)((int)scalar - v.Y), (int)((int)scalar - v.Z), (int)((int)scalar - v.W));
	}

	/// <summary>Int4 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar, v.W - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator -(Int4 v, ulong scalar)
	{
		return new Int4((int)(v.X - (int)scalar), (int)(v.Y - (int)scalar), (int)(v.Z - (int)scalar), (int)(v.W - (int)scalar));
	}

	/// <summary>ulong * Int4 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z, scalar * v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(ulong scalar, Int4 v)
	{
		return new Int4((int)((int)scalar * v.X), (int)((int)scalar * v.Y), (int)((int)scalar * v.Z), (int)((int)scalar * v.W));
	}

	/// <summary>Int4 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar, v.W * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator *(Int4 v, ulong scalar)
	{
		return new Int4((int)(v.X * (int)scalar), (int)(v.Y * (int)scalar), (int)(v.Z * (int)scalar), (int)(v.W * (int)scalar));
	}

	/// <summary>ulong / Int4 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar, v.W / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(Int4 v, ulong scalar)
	{
		return new Int4((int)(v.X / (int)scalar), (int)(v.Y / (int)scalar), (int)(v.Z / (int)scalar), (int)(v.W / (int)scalar));
	}

	/// <summary>ulong / Int4 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z, scalar / v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator /(ulong scalar, Int4 v)
	{
		return new Int4((int)((int)scalar / v.X), (int)((int)scalar / v.Y), (int)((int)scalar / v.Z), (int)((int)scalar / v.W));
	}

	/// <summary>Int4 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar, v.W % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(Int4 v, ulong scalar)
	{
		return new Int4((int)(v.X % (int)scalar), (int)(v.Y % (int)scalar), (int)(v.Z % (int)scalar), (int)(v.W % (int)scalar));
	}

	/// <summary>ulong % Int4 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z, scalar % v.W).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 operator %(ulong scalar, Int4 v)
	{
		return new Int4((int)((int)scalar % v.X), (int)((int)scalar % v.Y), (int)((int)scalar % v.Z), (int)((int)scalar % v.W));
	}

	// --- Component-wise Comparison Operators (Return Boolean Vector) ---
	/// <summary>Returns a Bool4 indicating the result of component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator <(Int4 a, Int4 b) { return new Bool4(a.X < b.X, a.Y < b.Y, a.Z < b.Z, a.W < b.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator <(Int4 a, int scalar) { return new Bool4(a.X < scalar, a.Y < scalar, a.Z < scalar, a.W < scalar); }

	/// <summary>Returns a Bool4 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator <(int scalar, Int4 a) { return new Bool4(scalar < a.X, scalar < a.Y, scalar < a.Z, scalar < a.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator <=(Int4 a, Int4 b) { return new Bool4(a.X <= b.X, a.Y <= b.Y, a.Z <= b.Z, a.W <= b.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator <=(Int4 a, int scalar) { return new Bool4(a.X <= scalar, a.Y <= scalar, a.Z <= scalar, a.W <= scalar); }

	/// <summary>Returns a Bool4 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator <=(int scalar, Int4 a) { return new Bool4(scalar <= a.X, scalar <= a.Y, scalar <= a.Z, scalar <= a.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator >(Int4 a, Int4 b) { return new Bool4(a.X > b.X, a.Y > b.Y, a.Z > b.Z, a.W > b.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator >(Int4 a, int scalar) { return new Bool4(a.X > scalar, a.Y > scalar, a.Z > scalar, a.W > scalar); }

	/// <summary>Returns a Bool4 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator >(int scalar, Int4 a) { return new Bool4(scalar > a.X, scalar > a.Y, scalar > a.Z, scalar > a.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator >=(Int4 a, Int4 b) { return new Bool4(a.X >= b.X, a.Y >= b.Y, a.Z >= b.Z, a.W >= b.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator >=(Int4 a, int scalar) { return new Bool4(a.X >= scalar, a.Y >= scalar, a.Z >= scalar, a.W >= scalar); }

	/// <summary>Returns a Bool4 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator >=(int scalar, Int4 a) { return new Bool4(scalar >= a.X, scalar >= a.Y, scalar >= a.Z, scalar >= a.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator ==(Int4 a, Int4 b) { return new Bool4(a.X == b.X, a.Y == b.Y, a.Z == b.Z, a.W == b.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator ==(Int4 a, int scalar) { return new Bool4(a.X == scalar, a.Y == scalar, a.Z == scalar, a.W == scalar); }

	/// <summary>Returns a Bool4 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator ==(int scalar, Int4 a) { return new Bool4(scalar == a.X, scalar == a.Y, scalar == a.Z, scalar == a.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator !=(Int4 a, Int4 b) { return new Bool4(a.X != b.X, a.Y != b.Y, a.Z != b.Z, a.W != b.W); }

	/// <summary>Returns a Bool4 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator !=(Int4 a, int scalar) { return new Bool4(a.X != scalar, a.Y != scalar, a.Z != scalar, a.W != scalar); }

	/// <summary>Returns a Bool4 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool4 operator !=(int scalar, Int4 a) { return new Bool4(scalar != a.X, scalar != a.Y, scalar != a.Z, scalar != a.W); }

	// --- Casting ---
	// --- Cross-Dimensions Casting Operators ---
	/// <summary>Implicitly converts a Int2 to Int4 by adding default values for missing components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Int4(Int2 value) => new Int4(value.X, value.Y, 0, 0);

	/// <summary>Implicitly converts a Int3 to Int4 by adding default values for missing components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Int4(Int3 value) => new Int4(value.X, value.Y, value.Z, 0);

	/// <summary>Explicitly converts Int4 to Int2 by truncating components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int2(Int4 value) => new Int2(value.X, value.Y);

	/// <summary>Explicitly converts Int4 to Int3 by truncating components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int3(Int4 value) => new Int3(value.X, value.Y, value.Z);

	// --- Cross-Type Casting Operators ---
	/// <summary>Explicitly converts a Float4 to a Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int4(Float4 v) => new Int4(v);

	/// <summary>Explicitly converts a Double4 to a Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int4(Double4 v) => new Int4(v);

	/// <summary>Implicitly converts a Byte4 to a Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Int4(Byte4 v) => new Int4(v);

	/// <summary>Implicitly converts a UShort4 to a Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Int4(UShort4 v) => new Int4(v);

	/// <summary>Explicitly converts a UInt4 to a Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int4(UInt4 v) => new Int4(v);

	/// <summary>Explicitly converts a ULong4 to a Int4.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Int4(ULong4 v) => new Int4(v);

	// --- Methods ---
	/// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 LessThan(Int4 other) { return new Bool4(X < other.X, Y < other.Y, Z < other.Z, W < other.W); }

	/// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 LessThanOrEqual(Int4 other) { return new Bool4(X <= other.X, Y <= other.Y, Z <= other.Z, W <= other.W); }

	/// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 GreaterThan(Int4 other) { return new Bool4(X > other.X, Y > other.Y, Z > other.Z, W > other.W); }

	/// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 GreaterThanOrEqual(Int4 other) { return new Bool4(X >= other.X, Y >= other.Y, Z >= other.Z, W >= other.W); }

	/// <summary>Selects components from two vectors based on a boolean mask.</summary>
	/// <param name="mask">Boolean vector mask for selection.</param>
	/// <param name="trueValue">Vector to select from when mask component is true.</param>
	/// <param name="falseValue">Vector to select from when mask component is false.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Int4 Select(Bool4 mask, Int4 trueValue, Int4 falseValue)
	{
		return new Int4(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y, mask.Z ? trueValue.Z : falseValue.Z, mask.W ? trueValue.W : falseValue.W);
	}

	/// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 InRange(Int4 min, Int4 max)
	{
		return new Bool4(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y, Z >= min.Z && Z <= max.Z, W >= min.W && W <= max.W);
	}

	/// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 EqualTo(Int4 other) { return new Bool4(X == other.X, Y == other.Y, Z == other.Z, W == other.W); }

	/// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 NotEqualTo(Int4 other) { return new Bool4(X != other.X, Y != other.Y, Z != other.Z, W != other.W); }

	/// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 LessThan(int scalar) { return new Bool4(X < scalar, Y < scalar, Z < scalar, W < scalar); }

	/// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 GreaterThan(int scalar) { return new Bool4(X > scalar, Y > scalar, Z > scalar, W > scalar); }

	/// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool4 EqualTo(int scalar) { return new Bool4(X == scalar, Y == scalar, Z == scalar, W == scalar); }

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public int[] ToArray() { return new int[] { X, Y, Z, W }; }
	/// <summary>Returns an array of components.</summary>
	public override bool Equals(object? obj) { return obj is Int4 && Equals((Int4)obj); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(Int4 other) { return X == other.X && Y == other.Y && Z == other.Z && W == other.W; }

	public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2) ^ (W.GetHashCode() >> 1); }

	public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	public string ToString(string format, IFormatProvider formatProvider)
	{
		string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
		return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + separator + Z.ToString(format, formatProvider) + separator + W.ToString(format, formatProvider) + ")";
	}
}
}
