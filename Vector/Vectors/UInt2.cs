//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-11 14:12:57
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{

/// <summary>
/// Represents a 2-component vector using uint precision.
/// </summary>
[System.Serializable]
public partial struct UInt2 : IEquatable<UInt2>, IFormattable
{
	public uint X, Y;

	// --- Constructors ---
	/// <summary>Initializes all components to a single scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(uint scalar) : this(scalar, scalar) { }

	/// <summary>Initializes with specified component values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(uint x, uint y)
	{
		X = x;
		Y = y;
	}

	/// <summary>Initializes by copying components from another UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(UInt2 v) : this(v.X, v.Y) { }

	/// <summary>Initializes from an array.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(uint[] array)
	{
		if (array == null) throw new ArgumentNullException(nameof(array));
		if (array.Length < 2) throw new ArgumentException("Array must contain at least 2 elements.", nameof(array));
		X = array[0];
		Y = array[1];
	}

	// --- Type Conversion Constructors ---
	/// <summary>Initializes from a Float2 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(Float2 v) : this((uint)v.X, (uint)v.Y) { }

	/// <summary>Initializes from a Double2 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(Double2 v) : this((uint)v.X, (uint)v.Y) { }

	/// <summary>Initializes from a Int2 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(Int2 v) : this((uint)v.X, (uint)v.Y) { }

	/// <summary>Initializes from a Byte2 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(Byte2 v) : this((uint)v.X, (uint)v.Y) { }

	/// <summary>Initializes from a UShort2 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(UShort2 v) : this((uint)v.X, (uint)v.Y) { }

	/// <summary>Initializes from a ULong2 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(ULong2 v) : this((uint)v.X, (uint)v.Y) { }

	// --- Collection Constructors ---
	/// <summary>Initializes from an IEnumerable collection.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(IEnumerable<uint> values)
	{
		var array = values.ToArray();
		if (array.Length < 2) throw new ArgumentException("Collection must contain at least 2 elements.", nameof(values));
		X = array[0];
		Y = array[1];
	}

	/// <summary>Initializes from a ReadOnlySpan.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(ReadOnlySpan<uint> span)
	{
		if (span.Length < 2) throw new ArgumentException("Span must contain at least 2 elements.", nameof(span));
		X = span[0];
		Y = span[1];
	}

	/// <summary>Initializes from a Span.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt2(Span<uint> span)
	{
		if (span.Length < 2) throw new ArgumentException("Span must contain at least 2 elements.", nameof(span));
		X = span[0];
		Y = span[1];
	}

	// --- Static Properties ---
	/// <summary>Gets the zero vector.</summary>
	public static UInt2 Zero { get { return new UInt2(0u, 0u); } }
	/// <summary>Gets the one vector.</summary>
	public static UInt2 One { get { return new UInt2(1u, 1u); } }
	/// <summary>Gets the unit vector along the X-axis.</summary>
	public static UInt2 UnitX { get { return new UInt2(1u, 0u); } }
	/// <summary>Gets the unit vector along the Y-axis.</summary>
	public static UInt2 UnitY { get { return new UInt2(0u, 1u); } }

	// --- Indexer ---
	/// <summary>Gets or sets the component at the specified index.</summary>
	public uint this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			switch (index)
			{
				case 0: return X;
				case 1: return Y;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 1, but was {0}", index));
			}
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			switch (index)
			{
				case 0: X = value; break;
				case 1: Y = value; break;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 1, but was {0}", index));
			}
		}
	}

	// --- Vector-to-Vector Operators ---
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 a, UInt2 b) { return new UInt2(a.X + b.X, a.Y + b.Y); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 a, UInt2 b) { return new UInt2(a.X - b.X, a.Y - b.Y); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 a, UInt2 b) { return new UInt2(a.X * b.X, a.Y * b.Y); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 a, UInt2 b) { return new UInt2(a.X / b.X, a.Y / b.Y); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 a, UInt2 b) { return new UInt2(a.X % b.X, a.Y % b.Y); }

	// --- Scalar-Vector Operators ---
	/// <summary>float + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(float scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + float operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, float scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>float - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(float scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - float operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, float scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>float * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(float scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * float operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, float scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>float / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, float scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>float / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(float scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % float operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, float scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>float % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(float scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	/// <summary>double + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(double scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + double operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, double scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>double - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(double scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - double operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, double scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>double * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(double scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * double operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, double scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>double / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, double scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>double / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(double scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % double operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, double scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>double % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(double scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	/// <summary>int + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(int scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + int operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, int scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>int - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(int scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - int operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, int scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>int * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(int scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * int operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, int scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>int / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, int scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>int / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(int scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % int operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, int scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>int % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(int scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	/// <summary>byte + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(byte scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + byte operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, byte scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>byte - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(byte scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - byte operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, byte scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>byte * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(byte scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * byte operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, byte scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>byte / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, byte scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>byte / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(byte scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % byte operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, byte scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>byte % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(byte scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	/// <summary>ushort + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(ushort scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, ushort scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>ushort - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(ushort scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, ushort scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>ushort * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(ushort scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, ushort scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>ushort / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, ushort scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>ushort / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(ushort scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, ushort scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>ushort % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(ushort scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	/// <summary>uint + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(uint scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + uint operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, uint scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>uint - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(uint scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - uint operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, uint scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>uint * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(uint scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * uint operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, uint scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>uint / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, uint scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>uint / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(uint scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % uint operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, uint scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>uint % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(uint scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	/// <summary>ulong + UInt2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(ulong scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar + v.X), (uint)(scalar + v.Y));
	}

	/// <summary>UInt2 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator +(UInt2 v, ulong scalar)
	{
		return new UInt2((uint)(v.X + scalar), (uint)(v.Y + scalar));
	}

	/// <summary>ulong - UInt2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(ulong scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar - v.X), (uint)(scalar - v.Y));
	}

	/// <summary>UInt2 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator -(UInt2 v, ulong scalar)
	{
		return new UInt2((uint)(v.X - scalar), (uint)(v.Y - scalar));
	}

	/// <summary>ulong * UInt2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(ulong scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar * v.X), (uint)(scalar * v.Y));
	}

	/// <summary>UInt2 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator *(UInt2 v, ulong scalar)
	{
		return new UInt2((uint)(v.X * scalar), (uint)(v.Y * scalar));
	}

	/// <summary>ulong / UInt2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(UInt2 v, ulong scalar)
	{
		return new UInt2((uint)(v.X / scalar), (uint)(v.Y / scalar));
	}

	/// <summary>ulong / UInt2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator /(ulong scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar / v.X), (uint)(scalar / v.Y));
	}

	/// <summary>UInt2 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(UInt2 v, ulong scalar)
	{
		return new UInt2((uint)(v.X % scalar), (uint)(v.Y % scalar));
	}

	/// <summary>ulong % UInt2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 operator %(ulong scalar, UInt2 v)
	{
		return new UInt2((uint)(scalar % v.X), (uint)(scalar % v.Y));
	}

	// --- Component-wise Comparison Operators (Return Boolean Vector) ---
	/// <summary>Returns a Bool2 indicating the result of component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator <(UInt2 a, UInt2 b) { return new Bool2(a.X < b.X, a.Y < b.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator <(UInt2 a, uint scalar) { return new Bool2(a.X < scalar, a.Y < scalar); }

	/// <summary>Returns a Bool2 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator <(uint scalar, UInt2 a) { return new Bool2(scalar < a.X, scalar < a.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator <=(UInt2 a, UInt2 b) { return new Bool2(a.X <= b.X, a.Y <= b.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator <=(UInt2 a, uint scalar) { return new Bool2(a.X <= scalar, a.Y <= scalar); }

	/// <summary>Returns a Bool2 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator <=(uint scalar, UInt2 a) { return new Bool2(scalar <= a.X, scalar <= a.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator >(UInt2 a, UInt2 b) { return new Bool2(a.X > b.X, a.Y > b.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator >(UInt2 a, uint scalar) { return new Bool2(a.X > scalar, a.Y > scalar); }

	/// <summary>Returns a Bool2 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator >(uint scalar, UInt2 a) { return new Bool2(scalar > a.X, scalar > a.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator >=(UInt2 a, UInt2 b) { return new Bool2(a.X >= b.X, a.Y >= b.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator >=(UInt2 a, uint scalar) { return new Bool2(a.X >= scalar, a.Y >= scalar); }

	/// <summary>Returns a Bool2 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator >=(uint scalar, UInt2 a) { return new Bool2(scalar >= a.X, scalar >= a.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator ==(UInt2 a, UInt2 b) { return new Bool2(a.X == b.X, a.Y == b.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator ==(UInt2 a, uint scalar) { return new Bool2(a.X == scalar, a.Y == scalar); }

	/// <summary>Returns a Bool2 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator ==(uint scalar, UInt2 a) { return new Bool2(scalar == a.X, scalar == a.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator !=(UInt2 a, UInt2 b) { return new Bool2(a.X != b.X, a.Y != b.Y); }

	/// <summary>Returns a Bool2 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator !=(UInt2 a, uint scalar) { return new Bool2(a.X != scalar, a.Y != scalar); }

	/// <summary>Returns a Bool2 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool2 operator !=(uint scalar, UInt2 a) { return new Bool2(scalar != a.X, scalar != a.Y); }

	// --- Casting ---
	// --- Cross-Dimensions Casting Operators ---
	// --- Cross-Type Casting Operators ---
	/// <summary>Explicitly converts a Float2 to a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt2(Float2 v) => new UInt2(v);

	/// <summary>Explicitly converts a Double2 to a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt2(Double2 v) => new UInt2(v);

	/// <summary>Explicitly converts a Int2 to a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt2(Int2 v) => new UInt2(v);

	/// <summary>Implicitly converts a Byte2 to a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator UInt2(Byte2 v) => new UInt2(v);

	/// <summary>Implicitly converts a UShort2 to a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator UInt2(UShort2 v) => new UInt2(v);

	/// <summary>Explicitly converts a ULong2 to a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt2(ULong2 v) => new UInt2(v);

	// --- Methods ---
	/// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 LessThan(UInt2 other) { return new Bool2(X < other.X, Y < other.Y); }

	/// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 LessThanOrEqual(UInt2 other) { return new Bool2(X <= other.X, Y <= other.Y); }

	/// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 GreaterThan(UInt2 other) { return new Bool2(X > other.X, Y > other.Y); }

	/// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 GreaterThanOrEqual(UInt2 other) { return new Bool2(X >= other.X, Y >= other.Y); }

	/// <summary>Selects components from two vectors based on a boolean mask.</summary>
	/// <param name="mask">Boolean vector mask for selection.</param>
	/// <param name="trueValue">Vector to select from when mask component is true.</param>
	/// <param name="falseValue">Vector to select from when mask component is false.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt2 Select(Bool2 mask, UInt2 trueValue, UInt2 falseValue)
	{
		return new UInt2(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y);
	}

	/// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 InRange(UInt2 min, UInt2 max)
	{
		return new Bool2(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y);
	}

	/// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 EqualTo(UInt2 other) { return new Bool2(X == other.X, Y == other.Y); }

	/// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 NotEqualTo(UInt2 other) { return new Bool2(X != other.X, Y != other.Y); }

	/// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 LessThan(uint scalar) { return new Bool2(X < scalar, Y < scalar); }

	/// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 GreaterThan(uint scalar) { return new Bool2(X > scalar, Y > scalar); }

	/// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool2 EqualTo(uint scalar) { return new Bool2(X == scalar, Y == scalar); }

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint[] ToArray() { return new uint[] { X, Y }; }
	/// <summary>Returns an array of components.</summary>
	public override bool Equals(object? obj) { return obj is UInt2 && Equals((UInt2)obj); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(UInt2 other) { return X == other.X && Y == other.Y; }

	public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2); }

	public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	public string ToString(string format, IFormatProvider formatProvider)
	{
		string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
		return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + ")";
	}
}
}
