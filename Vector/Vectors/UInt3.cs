//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-11 14:12:57
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{

/// <summary>
/// Represents a 3-component vector using uint precision.
/// </summary>
[System.Serializable]
public partial struct UInt3 : IEquatable<UInt3>, IFormattable
{
	public uint X, Y, Z;

	// --- Constructors ---
	/// <summary>Initializes all components to a single scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(uint scalar) : this(scalar, scalar, scalar) { }

	/// <summary>Initializes with specified component values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(uint x, uint y, uint z)
	{
		X = x;
		Y = y;
		Z = z;
	}

	/// <summary>Initializes by copying components from another UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(UInt3 v) : this(v.X, v.Y, v.Z) { }

	/// <summary>Initializes from an array.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(uint[] array)
	{
		if (array == null) throw new ArgumentNullException(nameof(array));
		if (array.Length < 3) throw new ArgumentException("Array must contain at least 3 elements.", nameof(array));
		X = array[0];
		Y = array[1];
		Z = array[2];
	}

	/// <summary>Initializes from a UInt2 and Z component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(UInt2 xy, uint z) : this(xy.X, xy.Y, z) { }

	/// <summary>Initializes from X component and a UInt2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(uint x, UInt2 yz) : this(x, yz.X, yz.Y) { }

	// --- Type Conversion Constructors ---
	/// <summary>Initializes from a Float3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(Float3 v) : this((uint)v.X, (uint)v.Y, (uint)v.Z) { }

	/// <summary>Initializes from a Double3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(Double3 v) : this((uint)v.X, (uint)v.Y, (uint)v.Z) { }

	/// <summary>Initializes from a Int3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(Int3 v) : this((uint)v.X, (uint)v.Y, (uint)v.Z) { }

	/// <summary>Initializes from a Byte3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(Byte3 v) : this((uint)v.X, (uint)v.Y, (uint)v.Z) { }

	/// <summary>Initializes from a UShort3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(UShort3 v) : this((uint)v.X, (uint)v.Y, (uint)v.Z) { }

	/// <summary>Initializes from a ULong3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(ULong3 v) : this((uint)v.X, (uint)v.Y, (uint)v.Z) { }

	// --- Collection Constructors ---
	/// <summary>Initializes from an IEnumerable collection.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(IEnumerable<uint> values)
	{
		var array = values.ToArray();
		if (array.Length < 3) throw new ArgumentException("Collection must contain at least 3 elements.", nameof(values));
		X = array[0];
		Y = array[1];
		Z = array[2];
	}

	/// <summary>Initializes from a ReadOnlySpan.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(ReadOnlySpan<uint> span)
	{
		if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
		X = span[0];
		Y = span[1];
		Z = span[2];
	}

	/// <summary>Initializes from a Span.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public UInt3(Span<uint> span)
	{
		if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
		X = span[0];
		Y = span[1];
		Z = span[2];
	}

	// --- Static Properties ---
	/// <summary>Gets the zero vector.</summary>
	public static UInt3 Zero { get { return new UInt3(0u, 0u, 0u); } }
	/// <summary>Gets the one vector.</summary>
	public static UInt3 One { get { return new UInt3(1u, 1u, 1u); } }
	/// <summary>Gets the unit vector along the X-axis.</summary>
	public static UInt3 UnitX { get { return new UInt3(1u, 0u, 0u); } }
	/// <summary>Gets the unit vector along the Y-axis.</summary>
	public static UInt3 UnitY { get { return new UInt3(0u, 1u, 0u); } }
	/// <summary>Gets the unit vector along the Z-axis.</summary>
	public static UInt3 UnitZ { get { return new UInt3(0u, 0u, 1u); } }

	// --- Indexer ---
	/// <summary>Gets or sets the component at the specified index.</summary>
	public uint this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			switch (index)
			{
				case 0: return X;
				case 1: return Y;
				case 2: return Z;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
			}
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			switch (index)
			{
				case 0: X = value; break;
				case 1: Y = value; break;
				case 2: Z = value; break;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
			}
		}
	}

	// --- Vector-to-Vector Operators ---
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 a, UInt3 b) { return new UInt3(a.X + b.X, a.Y + b.Y, a.Z + b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 a, UInt3 b) { return new UInt3(a.X - b.X, a.Y - b.Y, a.Z - b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 a, UInt3 b) { return new UInt3(a.X * b.X, a.Y * b.Y, a.Z * b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 a, UInt3 b) { return new UInt3(a.X / b.X, a.Y / b.Y, a.Z / b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 a, UInt3 b) { return new UInt3(a.X % b.X, a.Y % b.Y, a.Z % b.Z); }

	// --- Scalar-Vector Operators ---
	/// <summary>float + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(float scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + float operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, float scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>float - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(float scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - float operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, float scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>float * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(float scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * float operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, float scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>float / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, float scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>float / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(float scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % float operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, float scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>float % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(float scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	/// <summary>double + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(double scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + double operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, double scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>double - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(double scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - double operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, double scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>double * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(double scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * double operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, double scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>double / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, double scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>double / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(double scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % double operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, double scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>double % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(double scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	/// <summary>int + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(int scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + int operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, int scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>int - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(int scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - int operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, int scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>int * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(int scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * int operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, int scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>int / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, int scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>int / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(int scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % int operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, int scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>int % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(int scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	/// <summary>byte + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(byte scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + byte operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, byte scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>byte - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(byte scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - byte operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, byte scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>byte * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(byte scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * byte operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, byte scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>byte / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, byte scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>byte / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(byte scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % byte operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, byte scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>byte % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(byte scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	/// <summary>ushort + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(ushort scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, ushort scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>ushort - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(ushort scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, ushort scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>ushort * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(ushort scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, ushort scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>ushort / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, ushort scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>ushort / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(ushort scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, ushort scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>ushort % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(ushort scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	/// <summary>uint + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(uint scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + uint operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, uint scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>uint - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(uint scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - uint operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, uint scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>uint * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(uint scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * uint operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, uint scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>uint / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, uint scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>uint / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(uint scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % uint operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, uint scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>uint % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(uint scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	/// <summary>ulong + UInt3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(ulong scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar + v.X), (uint)(scalar + v.Y), (uint)(scalar + v.Z));
	}

	/// <summary>UInt3 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator +(UInt3 v, ulong scalar)
	{
		return new UInt3((uint)(v.X + scalar), (uint)(v.Y + scalar), (uint)(v.Z + scalar));
	}

	/// <summary>ulong - UInt3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(ulong scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar - v.X), (uint)(scalar - v.Y), (uint)(scalar - v.Z));
	}

	/// <summary>UInt3 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator -(UInt3 v, ulong scalar)
	{
		return new UInt3((uint)(v.X - scalar), (uint)(v.Y - scalar), (uint)(v.Z - scalar));
	}

	/// <summary>ulong * UInt3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(ulong scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar * v.X), (uint)(scalar * v.Y), (uint)(scalar * v.Z));
	}

	/// <summary>UInt3 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator *(UInt3 v, ulong scalar)
	{
		return new UInt3((uint)(v.X * scalar), (uint)(v.Y * scalar), (uint)(v.Z * scalar));
	}

	/// <summary>ulong / UInt3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(UInt3 v, ulong scalar)
	{
		return new UInt3((uint)(v.X / scalar), (uint)(v.Y / scalar), (uint)(v.Z / scalar));
	}

	/// <summary>ulong / UInt3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator /(ulong scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar / v.X), (uint)(scalar / v.Y), (uint)(scalar / v.Z));
	}

	/// <summary>UInt3 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(UInt3 v, ulong scalar)
	{
		return new UInt3((uint)(v.X % scalar), (uint)(v.Y % scalar), (uint)(v.Z % scalar));
	}

	/// <summary>ulong % UInt3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 operator %(ulong scalar, UInt3 v)
	{
		return new UInt3((uint)(scalar % v.X), (uint)(scalar % v.Y), (uint)(scalar % v.Z));
	}

	// --- Component-wise Comparison Operators (Return Boolean Vector) ---
	/// <summary>Returns a Bool3 indicating the result of component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <(UInt3 a, UInt3 b) { return new Bool3(a.X < b.X, a.Y < b.Y, a.Z < b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <(UInt3 a, uint scalar) { return new Bool3(a.X < scalar, a.Y < scalar, a.Z < scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <(uint scalar, UInt3 a) { return new Bool3(scalar < a.X, scalar < a.Y, scalar < a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <=(UInt3 a, UInt3 b) { return new Bool3(a.X <= b.X, a.Y <= b.Y, a.Z <= b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <=(UInt3 a, uint scalar) { return new Bool3(a.X <= scalar, a.Y <= scalar, a.Z <= scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <=(uint scalar, UInt3 a) { return new Bool3(scalar <= a.X, scalar <= a.Y, scalar <= a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >(UInt3 a, UInt3 b) { return new Bool3(a.X > b.X, a.Y > b.Y, a.Z > b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >(UInt3 a, uint scalar) { return new Bool3(a.X > scalar, a.Y > scalar, a.Z > scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >(uint scalar, UInt3 a) { return new Bool3(scalar > a.X, scalar > a.Y, scalar > a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >=(UInt3 a, UInt3 b) { return new Bool3(a.X >= b.X, a.Y >= b.Y, a.Z >= b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >=(UInt3 a, uint scalar) { return new Bool3(a.X >= scalar, a.Y >= scalar, a.Z >= scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >=(uint scalar, UInt3 a) { return new Bool3(scalar >= a.X, scalar >= a.Y, scalar >= a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator ==(UInt3 a, UInt3 b) { return new Bool3(a.X == b.X, a.Y == b.Y, a.Z == b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator ==(UInt3 a, uint scalar) { return new Bool3(a.X == scalar, a.Y == scalar, a.Z == scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator ==(uint scalar, UInt3 a) { return new Bool3(scalar == a.X, scalar == a.Y, scalar == a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator !=(UInt3 a, UInt3 b) { return new Bool3(a.X != b.X, a.Y != b.Y, a.Z != b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator !=(UInt3 a, uint scalar) { return new Bool3(a.X != scalar, a.Y != scalar, a.Z != scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator !=(uint scalar, UInt3 a) { return new Bool3(scalar != a.X, scalar != a.Y, scalar != a.Z); }

	// --- Casting ---
	// --- Cross-Dimensions Casting Operators ---
	/// <summary>Implicitly converts a UInt2 to UInt3 by adding default values for missing components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator UInt3(UInt2 value) => new UInt3(value.X, value.Y, 0u);

	/// <summary>Explicitly converts UInt3 to UInt2 by truncating components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt2(UInt3 value) => new UInt2(value.X, value.Y);

	// --- Cross-Type Casting Operators ---
	/// <summary>Explicitly converts a Float3 to a UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3(Float3 v) => new UInt3(v);

	/// <summary>Explicitly converts a Double3 to a UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3(Double3 v) => new UInt3(v);

	/// <summary>Explicitly converts a Int3 to a UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3(Int3 v) => new UInt3(v);

	/// <summary>Implicitly converts a Byte3 to a UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator UInt3(Byte3 v) => new UInt3(v);

	/// <summary>Implicitly converts a UShort3 to a UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator UInt3(UShort3 v) => new UInt3(v);

	/// <summary>Explicitly converts a ULong3 to a UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3(ULong3 v) => new UInt3(v);

	// --- Methods ---
	/// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 LessThan(UInt3 other) { return new Bool3(X < other.X, Y < other.Y, Z < other.Z); }

	/// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 LessThanOrEqual(UInt3 other) { return new Bool3(X <= other.X, Y <= other.Y, Z <= other.Z); }

	/// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 GreaterThan(UInt3 other) { return new Bool3(X > other.X, Y > other.Y, Z > other.Z); }

	/// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 GreaterThanOrEqual(UInt3 other) { return new Bool3(X >= other.X, Y >= other.Y, Z >= other.Z); }

	/// <summary>Selects components from two vectors based on a boolean mask.</summary>
	/// <param name="mask">Boolean vector mask for selection.</param>
	/// <param name="trueValue">Vector to select from when mask component is true.</param>
	/// <param name="falseValue">Vector to select from when mask component is false.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static UInt3 Select(Bool3 mask, UInt3 trueValue, UInt3 falseValue)
	{
		return new UInt3(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y, mask.Z ? trueValue.Z : falseValue.Z);
	}

	/// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 InRange(UInt3 min, UInt3 max)
	{
		return new Bool3(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y, Z >= min.Z && Z <= max.Z);
	}

	/// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 EqualTo(UInt3 other) { return new Bool3(X == other.X, Y == other.Y, Z == other.Z); }

	/// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 NotEqualTo(UInt3 other) { return new Bool3(X != other.X, Y != other.Y, Z != other.Z); }

	/// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 LessThan(uint scalar) { return new Bool3(X < scalar, Y < scalar, Z < scalar); }

	/// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 GreaterThan(uint scalar) { return new Bool3(X > scalar, Y > scalar, Z > scalar); }

	/// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 EqualTo(uint scalar) { return new Bool3(X == scalar, Y == scalar, Z == scalar); }

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public uint[] ToArray() { return new uint[] { X, Y, Z }; }
	/// <summary>Returns an array of components.</summary>
	public override bool Equals(object? obj) { return obj is UInt3 && Equals((UInt3)obj); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(UInt3 other) { return X == other.X && Y == other.Y && Z == other.Z; }

	public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2); }

	public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	public string ToString(string format, IFormatProvider formatProvider)
	{
		string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
		return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + separator + Z.ToString(format, formatProvider) + ")";
	}
}
}
