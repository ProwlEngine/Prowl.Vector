//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-06-04 01:01:55
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{

/// <summary>
/// Represents a 3-component vector using ulong precision.
/// </summary>
[System.Serializable]
public partial struct ULong3 : IEquatable<ULong3>, IFormattable
{
	public ulong X, Y, Z;

	// --- Constructors ---
	/// <summary>Initializes all components to a single scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ulong scalar) : this(scalar, scalar, scalar) { }

	/// <summary>Initializes with specified component values.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ulong x, ulong y, ulong z)
	{
		X = x;
		Y = y;
		Z = z;
	}

	/// <summary>Initializes by copying components from another ULong3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ULong3 v) : this(v.X, v.Y, v.Z) { }

	/// <summary>Initializes from an array.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ulong[] array)
	{
		if (array == null) throw new ArgumentNullException(nameof(array));
		if (array.Length < 3) throw new ArgumentException("Array must contain at least 3 elements.", nameof(array));
		X = array[0];
		Y = array[1];
		Z = array[2];
	}

	/// <summary>Initializes from a ULong2 and Z component.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ULong2 xy, ulong z) : this(xy.X, xy.Y, z) { }

	/// <summary>Initializes from X component and a ULong2.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ulong x, ULong2 yz) : this(x, yz.X, yz.Y) { }

	// --- Type Conversion Constructors ---
	/// <summary>Initializes from a Float3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(Float3 v) : this((ulong)v.X, (ulong)v.Y, (ulong)v.Z) { }

	/// <summary>Initializes from a Double3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(Double3 v) : this((ulong)v.X, (ulong)v.Y, (ulong)v.Z) { }

	/// <summary>Initializes from a Int3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(Int3 v) : this((ulong)v.X, (ulong)v.Y, (ulong)v.Z) { }

	/// <summary>Initializes from a Byte3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(Byte3 v) : this((ulong)v.X, (ulong)v.Y, (ulong)v.Z) { }

	/// <summary>Initializes from a UShort3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(UShort3 v) : this((ulong)v.X, (ulong)v.Y, (ulong)v.Z) { }

	/// <summary>Initializes from a UInt3 with type conversion.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(UInt3 v) : this((ulong)v.X, (ulong)v.Y, (ulong)v.Z) { }

	// --- Collection Constructors ---
	/// <summary>Initializes from an IEnumerable collection.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(IEnumerable<ulong> values)
	{
		var array = values.ToArray();
		if (array.Length < 3) throw new ArgumentException("Collection must contain at least 3 elements.", nameof(values));
		X = array[0];
		Y = array[1];
		Z = array[2];
	}

	/// <summary>Initializes from a ReadOnlySpan.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(ReadOnlySpan<ulong> span)
	{
		if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
		X = span[0];
		Y = span[1];
		Z = span[2];
	}

	/// <summary>Initializes from a Span.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ULong3(Span<ulong> span)
	{
		if (span.Length < 3) throw new ArgumentException("Span must contain at least 3 elements.", nameof(span));
		X = span[0];
		Y = span[1];
		Z = span[2];
	}

	// --- Static Properties ---
	/// <summary>Gets the zero vector.</summary>
	public static ULong3 Zero { get { return new ULong3(0ul, 0ul, 0ul); } }
	/// <summary>Gets the one vector.</summary>
	public static ULong3 One { get { return new ULong3(1ul, 1ul, 1ul); } }
	/// <summary>Gets the unit vector along the X-axis.</summary>
	public static ULong3 UnitX { get { return new ULong3(1ul, 0ul, 0ul); } }
	/// <summary>Gets the unit vector along the Y-axis.</summary>
	public static ULong3 UnitY { get { return new ULong3(0ul, 1ul, 0ul); } }
	/// <summary>Gets the unit vector along the Z-axis.</summary>
	public static ULong3 UnitZ { get { return new ULong3(0ul, 0ul, 1ul); } }

	// --- Indexer ---
	/// <summary>Gets or sets the component at the specified index.</summary>
	public ulong this[int index]
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get
		{
			switch (index)
			{
				case 0: return X;
				case 1: return Y;
				case 2: return Z;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
			}
		}
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set
		{
			switch (index)
			{
				case 0: X = value; break;
				case 1: Y = value; break;
				case 2: Z = value; break;
				default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 2, but was {0}", index));
			}
		}
	}

	// --- Vector-to-Vector Operators ---
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 a, ULong3 b) { return new ULong3(a.X + b.X, a.Y + b.Y, a.Z + b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 a, ULong3 b) { return new ULong3(a.X - b.X, a.Y - b.Y, a.Z - b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 a, ULong3 b) { return new ULong3(a.X * b.X, a.Y * b.Y, a.Z * b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 a, ULong3 b) { return new ULong3(a.X / b.X, a.Y / b.Y, a.Z / b.Z); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 a, ULong3 b) { return new ULong3(a.X % b.X, a.Y % b.Y, a.Z % b.Z); }

	// --- Scalar-Vector Operators ---
	/// <summary>float + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(float scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar + v.X), (ulong)(scalar + v.Y), (ulong)(scalar + v.Z));
	}

	/// <summary>ULong3 + float operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, float scalar)
	{
		return new ULong3((ulong)(v.X + scalar), (ulong)(v.Y + scalar), (ulong)(v.Z + scalar));
	}

	/// <summary>float - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(float scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar - v.X), (ulong)(scalar - v.Y), (ulong)(scalar - v.Z));
	}

	/// <summary>ULong3 - float operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, float scalar)
	{
		return new ULong3((ulong)(v.X - scalar), (ulong)(v.Y - scalar), (ulong)(v.Z - scalar));
	}

	/// <summary>float * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(float scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar * v.X), (ulong)(scalar * v.Y), (ulong)(scalar * v.Z));
	}

	/// <summary>ULong3 * float operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, float scalar)
	{
		return new ULong3((ulong)(v.X * scalar), (ulong)(v.Y * scalar), (ulong)(v.Z * scalar));
	}

	/// <summary>float / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, float scalar)
	{
		return new ULong3((ulong)(v.X / scalar), (ulong)(v.Y / scalar), (ulong)(v.Z / scalar));
	}

	/// <summary>float / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(float scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar / v.X), (ulong)(scalar / v.Y), (ulong)(scalar / v.Z));
	}

	/// <summary>ULong3 % float operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, float scalar)
	{
		return new ULong3((ulong)(v.X % scalar), (ulong)(v.Y % scalar), (ulong)(v.Z % scalar));
	}

	/// <summary>float % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(float scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar % v.X), (ulong)(scalar % v.Y), (ulong)(scalar % v.Z));
	}

	/// <summary>double + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(double scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar + v.X), (ulong)(scalar + v.Y), (ulong)(scalar + v.Z));
	}

	/// <summary>ULong3 + double operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, double scalar)
	{
		return new ULong3((ulong)(v.X + scalar), (ulong)(v.Y + scalar), (ulong)(v.Z + scalar));
	}

	/// <summary>double - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(double scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar - v.X), (ulong)(scalar - v.Y), (ulong)(scalar - v.Z));
	}

	/// <summary>ULong3 - double operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, double scalar)
	{
		return new ULong3((ulong)(v.X - scalar), (ulong)(v.Y - scalar), (ulong)(v.Z - scalar));
	}

	/// <summary>double * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(double scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar * v.X), (ulong)(scalar * v.Y), (ulong)(scalar * v.Z));
	}

	/// <summary>ULong3 * double operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, double scalar)
	{
		return new ULong3((ulong)(v.X * scalar), (ulong)(v.Y * scalar), (ulong)(v.Z * scalar));
	}

	/// <summary>double / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, double scalar)
	{
		return new ULong3((ulong)(v.X / scalar), (ulong)(v.Y / scalar), (ulong)(v.Z / scalar));
	}

	/// <summary>double / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(double scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar / v.X), (ulong)(scalar / v.Y), (ulong)(scalar / v.Z));
	}

	/// <summary>ULong3 % double operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, double scalar)
	{
		return new ULong3((ulong)(v.X % scalar), (ulong)(v.Y % scalar), (ulong)(v.Z % scalar));
	}

	/// <summary>double % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(double scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar % v.X), (ulong)(scalar % v.Y), (ulong)(scalar % v.Z));
	}

	/// <summary>int + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(int scalar, ULong3 v)
	{
		return new ULong3((ulong)((ulong)scalar + v.X), (ulong)((ulong)scalar + v.Y), (ulong)((ulong)scalar + v.Z));
	}

	/// <summary>ULong3 + int operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, int scalar)
	{
		return new ULong3((ulong)(v.X + (ulong)scalar), (ulong)(v.Y + (ulong)scalar), (ulong)(v.Z + (ulong)scalar));
	}

	/// <summary>int - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(int scalar, ULong3 v)
	{
		return new ULong3((ulong)((ulong)scalar - v.X), (ulong)((ulong)scalar - v.Y), (ulong)((ulong)scalar - v.Z));
	}

	/// <summary>ULong3 - int operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, int scalar)
	{
		return new ULong3((ulong)(v.X - (ulong)scalar), (ulong)(v.Y - (ulong)scalar), (ulong)(v.Z - (ulong)scalar));
	}

	/// <summary>int * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(int scalar, ULong3 v)
	{
		return new ULong3((ulong)((ulong)scalar * v.X), (ulong)((ulong)scalar * v.Y), (ulong)((ulong)scalar * v.Z));
	}

	/// <summary>ULong3 * int operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, int scalar)
	{
		return new ULong3((ulong)(v.X * (ulong)scalar), (ulong)(v.Y * (ulong)scalar), (ulong)(v.Z * (ulong)scalar));
	}

	/// <summary>int / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, int scalar)
	{
		return new ULong3((ulong)(v.X / (ulong)scalar), (ulong)(v.Y / (ulong)scalar), (ulong)(v.Z / (ulong)scalar));
	}

	/// <summary>int / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(int scalar, ULong3 v)
	{
		return new ULong3((ulong)((ulong)scalar / v.X), (ulong)((ulong)scalar / v.Y), (ulong)((ulong)scalar / v.Z));
	}

	/// <summary>ULong3 % int operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, int scalar)
	{
		return new ULong3((ulong)(v.X % (ulong)scalar), (ulong)(v.Y % (ulong)scalar), (ulong)(v.Z % (ulong)scalar));
	}

	/// <summary>int % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(int scalar, ULong3 v)
	{
		return new ULong3((ulong)((ulong)scalar % v.X), (ulong)((ulong)scalar % v.Y), (ulong)((ulong)scalar % v.Z));
	}

	/// <summary>byte + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(byte scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar + v.X), (ulong)(scalar + v.Y), (ulong)(scalar + v.Z));
	}

	/// <summary>ULong3 + byte operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, byte scalar)
	{
		return new ULong3((ulong)(v.X + scalar), (ulong)(v.Y + scalar), (ulong)(v.Z + scalar));
	}

	/// <summary>byte - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(byte scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar - v.X), (ulong)(scalar - v.Y), (ulong)(scalar - v.Z));
	}

	/// <summary>ULong3 - byte operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, byte scalar)
	{
		return new ULong3((ulong)(v.X - scalar), (ulong)(v.Y - scalar), (ulong)(v.Z - scalar));
	}

	/// <summary>byte * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(byte scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar * v.X), (ulong)(scalar * v.Y), (ulong)(scalar * v.Z));
	}

	/// <summary>ULong3 * byte operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, byte scalar)
	{
		return new ULong3((ulong)(v.X * scalar), (ulong)(v.Y * scalar), (ulong)(v.Z * scalar));
	}

	/// <summary>byte / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, byte scalar)
	{
		return new ULong3((ulong)(v.X / scalar), (ulong)(v.Y / scalar), (ulong)(v.Z / scalar));
	}

	/// <summary>byte / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(byte scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar / v.X), (ulong)(scalar / v.Y), (ulong)(scalar / v.Z));
	}

	/// <summary>ULong3 % byte operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, byte scalar)
	{
		return new ULong3((ulong)(v.X % scalar), (ulong)(v.Y % scalar), (ulong)(v.Z % scalar));
	}

	/// <summary>byte % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(byte scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar % v.X), (ulong)(scalar % v.Y), (ulong)(scalar % v.Z));
	}

	/// <summary>ushort + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ushort scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar + v.X), (ulong)(scalar + v.Y), (ulong)(scalar + v.Z));
	}

	/// <summary>ULong3 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, ushort scalar)
	{
		return new ULong3((ulong)(v.X + scalar), (ulong)(v.Y + scalar), (ulong)(v.Z + scalar));
	}

	/// <summary>ushort - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ushort scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar - v.X), (ulong)(scalar - v.Y), (ulong)(scalar - v.Z));
	}

	/// <summary>ULong3 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, ushort scalar)
	{
		return new ULong3((ulong)(v.X - scalar), (ulong)(v.Y - scalar), (ulong)(v.Z - scalar));
	}

	/// <summary>ushort * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ushort scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar * v.X), (ulong)(scalar * v.Y), (ulong)(scalar * v.Z));
	}

	/// <summary>ULong3 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, ushort scalar)
	{
		return new ULong3((ulong)(v.X * scalar), (ulong)(v.Y * scalar), (ulong)(v.Z * scalar));
	}

	/// <summary>ushort / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, ushort scalar)
	{
		return new ULong3((ulong)(v.X / scalar), (ulong)(v.Y / scalar), (ulong)(v.Z / scalar));
	}

	/// <summary>ushort / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ushort scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar / v.X), (ulong)(scalar / v.Y), (ulong)(scalar / v.Z));
	}

	/// <summary>ULong3 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, ushort scalar)
	{
		return new ULong3((ulong)(v.X % scalar), (ulong)(v.Y % scalar), (ulong)(v.Z % scalar));
	}

	/// <summary>ushort % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ushort scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar % v.X), (ulong)(scalar % v.Y), (ulong)(scalar % v.Z));
	}

	/// <summary>uint + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(uint scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar + v.X), (ulong)(scalar + v.Y), (ulong)(scalar + v.Z));
	}

	/// <summary>ULong3 + uint operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, uint scalar)
	{
		return new ULong3((ulong)(v.X + scalar), (ulong)(v.Y + scalar), (ulong)(v.Z + scalar));
	}

	/// <summary>uint - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(uint scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar - v.X), (ulong)(scalar - v.Y), (ulong)(scalar - v.Z));
	}

	/// <summary>ULong3 - uint operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, uint scalar)
	{
		return new ULong3((ulong)(v.X - scalar), (ulong)(v.Y - scalar), (ulong)(v.Z - scalar));
	}

	/// <summary>uint * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(uint scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar * v.X), (ulong)(scalar * v.Y), (ulong)(scalar * v.Z));
	}

	/// <summary>ULong3 * uint operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, uint scalar)
	{
		return new ULong3((ulong)(v.X * scalar), (ulong)(v.Y * scalar), (ulong)(v.Z * scalar));
	}

	/// <summary>uint / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, uint scalar)
	{
		return new ULong3((ulong)(v.X / scalar), (ulong)(v.Y / scalar), (ulong)(v.Z / scalar));
	}

	/// <summary>uint / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(uint scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar / v.X), (ulong)(scalar / v.Y), (ulong)(scalar / v.Z));
	}

	/// <summary>ULong3 % uint operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, uint scalar)
	{
		return new ULong3((ulong)(v.X % scalar), (ulong)(v.Y % scalar), (ulong)(v.Z % scalar));
	}

	/// <summary>uint % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(uint scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar % v.X), (ulong)(scalar % v.Y), (ulong)(scalar % v.Z));
	}

	/// <summary>ulong + ULong3 operator. Vector components are (scalar + v.X, scalar + v.Y, scalar + v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ulong scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar + v.X), (ulong)(scalar + v.Y), (ulong)(scalar + v.Z));
	}

	/// <summary>ULong3 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar, v.Z + scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator +(ULong3 v, ulong scalar)
	{
		return new ULong3((ulong)(v.X + scalar), (ulong)(v.Y + scalar), (ulong)(v.Z + scalar));
	}

	/// <summary>ulong - ULong3 operator. Vector components are (scalar - v.X, scalar - v.Y, scalar - v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ulong scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar - v.X), (ulong)(scalar - v.Y), (ulong)(scalar - v.Z));
	}

	/// <summary>ULong3 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar, v.Z - scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator -(ULong3 v, ulong scalar)
	{
		return new ULong3((ulong)(v.X - scalar), (ulong)(v.Y - scalar), (ulong)(v.Z - scalar));
	}

	/// <summary>ulong * ULong3 operator. Vector components are (scalar * v.X, scalar * v.Y, scalar * v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ulong scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar * v.X), (ulong)(scalar * v.Y), (ulong)(scalar * v.Z));
	}

	/// <summary>ULong3 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar, v.Z * scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator *(ULong3 v, ulong scalar)
	{
		return new ULong3((ulong)(v.X * scalar), (ulong)(v.Y * scalar), (ulong)(v.Z * scalar));
	}

	/// <summary>ulong / ULong3 operator. Vector components are (v.X / scalar, v.Y / scalar, v.Z / scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ULong3 v, ulong scalar)
	{
		return new ULong3((ulong)(v.X / scalar), (ulong)(v.Y / scalar), (ulong)(v.Z / scalar));
	}

	/// <summary>ulong / ULong3 operator. Vector components are (scalar / v.X, scalar / v.Y, scalar / v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator /(ulong scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar / v.X), (ulong)(scalar / v.Y), (ulong)(scalar / v.Z));
	}

	/// <summary>ULong3 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar, v.Z % scalar).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ULong3 v, ulong scalar)
	{
		return new ULong3((ulong)(v.X % scalar), (ulong)(v.Y % scalar), (ulong)(v.Z % scalar));
	}

	/// <summary>ulong % ULong3 operator. Vector components are (scalar % v.X, scalar % v.Y, scalar % v.Z).</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 operator %(ulong scalar, ULong3 v)
	{
		return new ULong3((ulong)(scalar % v.X), (ulong)(scalar % v.Y), (ulong)(scalar % v.Z));
	}

	// --- Component-wise Comparison Operators (Return Boolean Vector) ---
	/// <summary>Returns a Bool3 indicating the result of component-wise < comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <(ULong3 a, ULong3 b) { return new Bool3(a.X < b.X, a.Y < b.Y, a.Z < b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <(ULong3 a, ulong scalar) { return new Bool3(a.X < scalar, a.Y < scalar, a.Z < scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise < comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <(ulong scalar, ULong3 a) { return new Bool3(scalar < a.X, scalar < a.Y, scalar < a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise <= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <=(ULong3 a, ULong3 b) { return new Bool3(a.X <= b.X, a.Y <= b.Y, a.Z <= b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <=(ULong3 a, ulong scalar) { return new Bool3(a.X <= scalar, a.Y <= scalar, a.Z <= scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise <= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator <=(ulong scalar, ULong3 a) { return new Bool3(scalar <= a.X, scalar <= a.Y, scalar <= a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise > comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >(ULong3 a, ULong3 b) { return new Bool3(a.X > b.X, a.Y > b.Y, a.Z > b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >(ULong3 a, ulong scalar) { return new Bool3(a.X > scalar, a.Y > scalar, a.Z > scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise > comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >(ulong scalar, ULong3 a) { return new Bool3(scalar > a.X, scalar > a.Y, scalar > a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise >= comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >=(ULong3 a, ULong3 b) { return new Bool3(a.X >= b.X, a.Y >= b.Y, a.Z >= b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >=(ULong3 a, ulong scalar) { return new Bool3(a.X >= scalar, a.Y >= scalar, a.Z >= scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise >= comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator >=(ulong scalar, ULong3 a) { return new Bool3(scalar >= a.X, scalar >= a.Y, scalar >= a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise == comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator ==(ULong3 a, ULong3 b) { return new Bool3(a.X == b.X, a.Y == b.Y, a.Z == b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator ==(ULong3 a, ulong scalar) { return new Bool3(a.X == scalar, a.Y == scalar, a.Z == scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise == comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator ==(ulong scalar, ULong3 a) { return new Bool3(scalar == a.X, scalar == a.Y, scalar == a.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise != comparison.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator !=(ULong3 a, ULong3 b) { return new Bool3(a.X != b.X, a.Y != b.Y, a.Z != b.Z); }

	/// <summary>Returns a Bool3 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator !=(ULong3 a, ulong scalar) { return new Bool3(a.X != scalar, a.Y != scalar, a.Z != scalar); }

	/// <summary>Returns a Bool3 indicating the result of component-wise != comparison with a scalar.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static Bool3 operator !=(ulong scalar, ULong3 a) { return new Bool3(scalar != a.X, scalar != a.Y, scalar != a.Z); }

	// --- Implicit Conversions ---
	/// <summary>Implicitly converts a ULong2 to ULong3 by adding default values for missing components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator ULong3(ULong2 value) => new ULong3(value.X, value.Y, 0ul);

	/// <summary>Explicitly converts ULong3 to ULong2 by truncating components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator ULong2(ULong3 value) => new ULong2(value.X, value.Y);

	/// <summary>Implicitly converts PHANG ULong3 to Float3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Float3(ULong3 value) => new Float3((float)value.X, (float)value.Y, (float)value.Z);

	/// <summary>Implicitly converts PHANG ULong3 to Double3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Double3(ULong3 value) => new Double3((double)value.X, (double)value.Y, (double)value.Z);

	/// <summary>Implicitly converts PHANG ULong3 to Int3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static implicit operator Int3(ULong3 value) => new Int3((int)value.X, (int)value.Y, (int)value.Z);

	/// <summary>Explicitly converts PHANG ULong3 to Byte3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator Byte3(ULong3 value) => new Byte3((byte)value.X, (byte)value.Y, (byte)value.Z);

	/// <summary>Explicitly converts PHANG ULong3 to UShort3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UShort3(ULong3 value) => new UShort3((ushort)value.X, (ushort)value.Y, (ushort)value.Z);

	/// <summary>Explicitly converts PHANG ULong3 to UInt3.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static explicit operator UInt3(ULong3 value) => new UInt3((uint)value.X, (uint)value.Y, (uint)value.Z);

	// --- Methods ---
	/// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 LessThan(ULong3 other) { return new Bool3(X < other.X, Y < other.Y, Z < other.Z); }

	/// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 LessThanOrEqual(ULong3 other) { return new Bool3(X <= other.X, Y <= other.Y, Z <= other.Z); }

	/// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 GreaterThan(ULong3 other) { return new Bool3(X > other.X, Y > other.Y, Z > other.Z); }

	/// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 GreaterThanOrEqual(ULong3 other) { return new Bool3(X >= other.X, Y >= other.Y, Z >= other.Z); }

	/// <summary>Selects components from two vectors based on a boolean mask.</summary>
	/// <param name="mask">Boolean vector mask for selection.</param>
	/// <param name="trueValue">Vector to select from when mask component is true.</param>
	/// <param name="falseValue">Vector to select from when mask component is false.</param>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static ULong3 Select(Bool3 mask, ULong3 trueValue, ULong3 falseValue)
	{
		return new ULong3(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y, mask.Z ? trueValue.Z : falseValue.Z);
	}

	/// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 InRange(ULong3 min, ULong3 max)
	{
		return new Bool3(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y, Z >= min.Z && Z <= max.Z);
	}

	/// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 EqualTo(ULong3 other) { return new Bool3(X == other.X, Y == other.Y, Z == other.Z); }

	/// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 NotEqualTo(ULong3 other) { return new Bool3(X != other.X, Y != other.Y, Z != other.Z); }

	/// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 LessThan(ulong scalar) { return new Bool3(X < scalar, Y < scalar, Z < scalar); }

	/// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 GreaterThan(ulong scalar) { return new Bool3(X > scalar, Y > scalar, Z > scalar); }

	/// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public Bool3 EqualTo(ulong scalar) { return new Bool3(X == scalar, Y == scalar, Z == scalar); }

	/// <summary>Returns an array of components.</summary>
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public ulong[] ToArray() { return new ulong[] { X, Y, Z }; }
	/// <summary>Returns an array of components.</summary>
	public override bool Equals(object? obj) { return obj is ULong3 && Equals((ULong3)obj); }

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public bool Equals(ULong3 other) { return X == other.X && Y == other.Y && Z == other.Z; }

	public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2) ^ (Z.GetHashCode() >> 2); }

	public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

	public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

	public string ToString(string format, IFormatProvider formatProvider)
	{
		string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
		return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + separator + Z.ToString(format, formatProvider) + ")";
	}
}
}
