//
// THIS FILE IS AUTO-GENERATED
//
// Do not modify this file directly. All changes will be lost when the code is regenerated.
// To make changes to this vector type, modify the SourceGenerator project and regenerate the code.
//
// Generated by: Prowl.Vector's SourceGenerator Console Application
// Date: 2025-05-14 11:12:59
//

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.Linq;

namespace Prowl.Vector
{
    /// <summary>
    /// Represents a 2-component vector using ushort precision.
    /// </summary>
    [System.Serializable]
    public partial struct UShort2 : IEquatable<UShort2>, IFormattable
    {
        public ushort X, Y;

        // --- Constructors ---
        /// <summary>Initializes all components to a single scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(ushort scalar) : this(scalar, scalar) { }

        /// <summary>Initializes with specified component values.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(ushort x, ushort y)
        {
            X = x;
            Y = y;
        }

        /// <summary>Initializes by copying components from another UShort2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(UShort2 v) : this(v.X, v.Y) { }

        /// <summary>Initializes from an array.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(ushort[] array)
        {
            if (array == null) throw new ArgumentNullException(nameof(array));
            if (array.Length < 2) throw new ArgumentException("Array must contain at least 2 elements.", nameof(array));
            X = array[0];
            Y = array[1];
        }

        // --- Type Conversion Constructors ---
        /// <summary>Initializes from a Float2 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(Float2 v) : this((ushort)v.X, (ushort)v.Y) { }

        /// <summary>Initializes from a Double2 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(Double2 v) : this((ushort)v.X, (ushort)v.Y) { }

        /// <summary>Initializes from a Int2 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(Int2 v) : this((ushort)v.X, (ushort)v.Y) { }

        /// <summary>Initializes from a Byte2 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(Byte2 v) : this((ushort)v.X, (ushort)v.Y) { }

        /// <summary>Initializes from a UInt2 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(UInt2 v) : this((ushort)v.X, (ushort)v.Y) { }

        /// <summary>Initializes from a ULong2 with type conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(ULong2 v) : this((ushort)v.X, (ushort)v.Y) { }

        // --- Collection Constructors ---
        /// <summary>Initializes from an IEnumerable collection.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(IEnumerable<ushort> values)
        {
            var array = values.ToArray();
            if (array.Length < 2) throw new ArgumentException("Collection must contain at least 2 elements.", nameof(values));
            X = array[0];
            Y = array[1];
        }

        /// <summary>Initializes from a ReadOnlySpan.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(ReadOnlySpan<ushort> span)
        {
            if (span.Length < 2) throw new ArgumentException("Span must contain at least 2 elements.", nameof(span));
            X = span[0];
            Y = span[1];
        }

        /// <summary>Initializes from a Span.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UShort2(Span<ushort> span)
        {
            if (span.Length < 2) throw new ArgumentException("Span must contain at least 2 elements.", nameof(span));
            X = span[0];
            Y = span[1];
        }

        // --- Static Properties ---
        /// <summary>Gets the zero vector.</summary>
        public static UShort2 Zero { get { return new UShort2((ushort)0, (ushort)0); } }
        /// <summary>Gets the one vector.</summary>
        public static UShort2 One { get { return new UShort2((ushort)1, (ushort)1); } }
        /// <summary>Gets the unit vector along the X-axis.</summary>
        public static UShort2 UnitX { get { return new UShort2((ushort)1, (ushort)0); } }
        /// <summary>Gets the unit vector along the Y-axis.</summary>
        public static UShort2 UnitY { get { return new UShort2((ushort)0, (ushort)1); } }

        // --- Indexer ---
        /// <summary>Gets or sets the component at the specified index.</summary>
        public ushort this[int index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get
            {
                switch (index)
                {
                    case 0: return X;
                    case 1: return Y;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 1, but was {0}", index));
                }
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                switch (index)
                {
                    case 0: X = value; break;
                    case 1: Y = value; break;
                    default: throw new IndexOutOfRangeException(string.Format("Index must be between 0 and 1, but was {0}", index));
                }
            }
        }

        // --- Vector-to-Vector Operators ---
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 a, UShort2 b) { return new UShort2((ushort)(a.X + b.X), (ushort)(a.Y + b.Y)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 a, UShort2 b) { return new UShort2((ushort)(a.X - b.X), (ushort)(a.Y - b.Y)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 a, UShort2 b) { return new UShort2((ushort)(a.X * b.X), (ushort)(a.Y * b.Y)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 a, UShort2 b) { return new UShort2((ushort)(a.X / b.X), (ushort)(a.Y / b.Y)); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 a, UShort2 b) { return new UShort2((ushort)(a.X % b.X), (ushort)(a.Y % b.Y)); }

        // --- Scalar-Vector Operators ---
        /// <summary>float + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(float scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + float operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, float scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>float - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(float scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - float operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, float scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>float * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(float scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * float operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, float scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>float / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, float scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>float / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(float scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % float operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, float scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>float % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(float scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        /// <summary>double + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(double scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + double operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, double scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>double - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(double scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - double operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, double scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>double * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(double scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * double operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, double scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>double / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, double scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>double / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(double scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % double operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, double scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>double % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(double scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        /// <summary>int + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(int scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + int operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, int scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>int - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(int scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - int operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, int scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>int * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(int scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * int operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, int scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>int / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, int scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>int / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(int scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % int operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, int scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>int % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(int scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        /// <summary>byte + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(byte scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + byte operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, byte scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>byte - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(byte scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - byte operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, byte scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>byte * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(byte scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * byte operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, byte scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>byte / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, byte scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>byte / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(byte scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % byte operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, byte scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>byte % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(byte scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        /// <summary>ushort + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(ushort scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + ushort operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, ushort scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>ushort - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(ushort scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - ushort operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, ushort scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>ushort * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(ushort scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * ushort operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, ushort scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>ushort / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, ushort scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>ushort / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(ushort scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % ushort operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, ushort scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>ushort % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(ushort scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        /// <summary>uint + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(uint scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + uint operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, uint scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>uint - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(uint scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - uint operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, uint scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>uint * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(uint scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * uint operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, uint scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>uint / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, uint scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>uint / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(uint scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % uint operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, uint scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>uint % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(uint scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        /// <summary>ulong + UShort2 operator. Vector components are (scalar + v.X, scalar + v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(ulong scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar + v.X), (ushort)(scalar + v.Y));
        }

        /// <summary>UShort2 + ulong operator. Vector components are (v.X + scalar, v.Y + scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator +(UShort2 v, ulong scalar)
        {
            return new UShort2((ushort)(v.X + scalar), (ushort)(v.Y + scalar));
        }

        /// <summary>ulong - UShort2 operator. Vector components are (scalar - v.X, scalar - v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(ulong scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar - v.X), (ushort)(scalar - v.Y));
        }

        /// <summary>UShort2 - ulong operator. Vector components are (v.X - scalar, v.Y - scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator -(UShort2 v, ulong scalar)
        {
            return new UShort2((ushort)(v.X - scalar), (ushort)(v.Y - scalar));
        }

        /// <summary>ulong * UShort2 operator. Vector components are (scalar * v.X, scalar * v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(ulong scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar * v.X), (ushort)(scalar * v.Y));
        }

        /// <summary>UShort2 * ulong operator. Vector components are (v.X * scalar, v.Y * scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator *(UShort2 v, ulong scalar)
        {
            return new UShort2((ushort)(v.X * scalar), (ushort)(v.Y * scalar));
        }

        /// <summary>ulong / UShort2 operator. Vector components are (v.X / scalar, v.Y / scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(UShort2 v, ulong scalar)
        {
            return new UShort2((ushort)(v.X / scalar), (ushort)(v.Y / scalar));
        }

        /// <summary>ulong / UShort2 operator. Vector components are (scalar / v.X, scalar / v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator /(ulong scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar / v.X), (ushort)(scalar / v.Y));
        }

        /// <summary>UShort2 % ulong operator. Vector components are (v.X % scalar, v.Y % scalar).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(UShort2 v, ulong scalar)
        {
            return new UShort2((ushort)(v.X % scalar), (ushort)(v.Y % scalar));
        }

        /// <summary>ulong % UShort2 operator. Vector components are (scalar % v.X, scalar % v.Y).</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 operator %(ulong scalar, UShort2 v)
        {
            return new UShort2((ushort)(scalar % v.X), (ushort)(scalar % v.Y));
        }

        // --- Component-wise Comparison Operators (Return Boolean Vector) ---
        /// <summary>Returns a Bool2 indicating the result of component-wise < comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator <(UShort2 a, UShort2 b) { return new Bool2(a.X < b.X, a.Y < b.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise < comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator <(UShort2 a, ushort scalar) { return new Bool2(a.X < scalar, a.Y < scalar); }

        /// <summary>Returns a Bool2 indicating the result of component-wise < comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator <(ushort scalar, UShort2 a) { return new Bool2(scalar < a.X, scalar < a.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise <= comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator <=(UShort2 a, UShort2 b) { return new Bool2(a.X <= b.X, a.Y <= b.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise <= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator <=(UShort2 a, ushort scalar) { return new Bool2(a.X <= scalar, a.Y <= scalar); }

        /// <summary>Returns a Bool2 indicating the result of component-wise <= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator <=(ushort scalar, UShort2 a) { return new Bool2(scalar <= a.X, scalar <= a.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise > comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator >(UShort2 a, UShort2 b) { return new Bool2(a.X > b.X, a.Y > b.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise > comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator >(UShort2 a, ushort scalar) { return new Bool2(a.X > scalar, a.Y > scalar); }

        /// <summary>Returns a Bool2 indicating the result of component-wise > comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator >(ushort scalar, UShort2 a) { return new Bool2(scalar > a.X, scalar > a.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise >= comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator >=(UShort2 a, UShort2 b) { return new Bool2(a.X >= b.X, a.Y >= b.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise >= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator >=(UShort2 a, ushort scalar) { return new Bool2(a.X >= scalar, a.Y >= scalar); }

        /// <summary>Returns a Bool2 indicating the result of component-wise >= comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator >=(ushort scalar, UShort2 a) { return new Bool2(scalar >= a.X, scalar >= a.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise == comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator ==(UShort2 a, UShort2 b) { return new Bool2(a.X == b.X, a.Y == b.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise == comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator ==(UShort2 a, ushort scalar) { return new Bool2(a.X == scalar, a.Y == scalar); }

        /// <summary>Returns a Bool2 indicating the result of component-wise == comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator ==(ushort scalar, UShort2 a) { return new Bool2(scalar == a.X, scalar == a.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise != comparison.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator !=(UShort2 a, UShort2 b) { return new Bool2(a.X != b.X, a.Y != b.Y); }

        /// <summary>Returns a Bool2 indicating the result of component-wise != comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator !=(UShort2 a, ushort scalar) { return new Bool2(a.X != scalar, a.Y != scalar); }

        /// <summary>Returns a Bool2 indicating the result of component-wise != comparison with a scalar.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Bool2 operator !=(ushort scalar, UShort2 a) { return new Bool2(scalar != a.X, scalar != a.Y); }

        // --- Implicit Conversions ---
        /// <summary>Implicitly converts UShort2 to Float2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Float2(UShort2 value) => new Float2((float)value.X, (float)value.Y);

        /// <summary>Implicitly converts UShort2 to Double2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Double2(UShort2 value) => new Double2((double)value.X, (double)value.Y);

        /// <summary>Implicitly converts UShort2 to Int2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator Int2(UShort2 value) => new Int2((int)value.X, (int)value.Y);

        /// <summary>Explicitly converts UShort2 to Byte2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator Byte2(UShort2 value) => new Byte2((byte)value.X, (byte)value.Y);

        /// <summary>Implicitly converts UShort2 to UInt2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator UInt2(UShort2 value) => new UInt2((uint)value.X, (uint)value.Y);

        /// <summary>Implicitly converts UShort2 to ULong2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator ULong2(UShort2 value) => new ULong2((ulong)value.X, (ulong)value.Y);

        // --- Methods ---
        /// <summary>Returns a boolean vector indicating which components are less than the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 LessThan(UShort2 other) { return new Bool2(X < other.X, Y < other.Y); }

        /// <summary>Returns a boolean vector indicating which components are less than or equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 LessThanOrEqual(UShort2 other) { return new Bool2(X <= other.X, Y <= other.Y); }

        /// <summary>Returns a boolean vector indicating which components are greater than the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 GreaterThan(UShort2 other) { return new Bool2(X > other.X, Y > other.Y); }

        /// <summary>Returns a boolean vector indicating which components are greater than or equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 GreaterThanOrEqual(UShort2 other) { return new Bool2(X >= other.X, Y >= other.Y); }

        /// <summary>Selects components from two vectors based on a boolean mask.</summary>
        /// <param name="mask">Boolean vector mask for selection.</param>
        /// <param name="trueValue">Vector to select from when mask component is true.</param>
        /// <param name="falseValue">Vector to select from when mask component is false.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static UShort2 Select(Bool2 mask, UShort2 trueValue, UShort2 falseValue)
        {
            return new UShort2(mask.X ? trueValue.X : falseValue.X, mask.Y ? trueValue.Y : falseValue.Y);
        }

        /// <summary>Returns a boolean vector indicating which components are within the specified range.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 InRange(UShort2 min, UShort2 max)
        {
            return new Bool2(X >= min.X && X <= max.X, Y >= min.Y && Y <= max.Y);
        }

        /// <summary>Returns a boolean vector indicating which components are equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 EqualTo(UShort2 other) { return new Bool2(X == other.X, Y == other.Y); }

        /// <summary>Returns a boolean vector indicating which components are not equal to the corresponding components of another vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 NotEqualTo(UShort2 other) { return new Bool2(X != other.X, Y != other.Y); }

        /// <summary>Returns a boolean vector indicating which components are less than a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 LessThan(ushort scalar) { return new Bool2(X < scalar, Y < scalar); }

        /// <summary>Returns a boolean vector indicating which components are greater than a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 GreaterThan(ushort scalar) { return new Bool2(X > scalar, Y > scalar); }

        /// <summary>Returns a boolean vector indicating which components are equal to a scalar value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Bool2 EqualTo(ushort scalar) { return new Bool2(X == scalar, Y == scalar); }

        /// <summary>Returns an array of components.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ushort[] ToArray() { return new ushort[] { X, Y }; }
        /// <summary>Returns an array of components.</summary>
        public override bool Equals(object obj) { return obj is UShort2 && Equals((UShort2)obj); }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(UShort2 other) { return X == other.X && Y == other.Y; }

        public override int GetHashCode() { return X.GetHashCode() ^ (Y.GetHashCode() << 2); }

        public override string ToString() { return ToString("G", CultureInfo.CurrentCulture); }

        public string ToString(string format) { return ToString(format, CultureInfo.CurrentCulture); }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            string separator = (formatProvider is CultureInfo) ? ((CultureInfo)formatProvider).TextInfo.ListSeparator : ", ";
            return "(" + X.ToString(format, formatProvider) + separator + Y.ToString(format, formatProvider) + ")";
        }
    }
}
